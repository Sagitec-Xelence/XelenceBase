<entity ID="entAppMonitoring" sfwView="False" sfwActive="True" sfwStatus="Review" sfwObjectID="busAppMonitoring" sfwParentEntity="entBase" sfwVersion="7.0">
  <attributes>
    <property>
      <attribute ID="FromDate" sfwDataType="datetime" sfwValue="idtFromDate" sfwCaption="From Date" sfwAccessModifier="public" />
      <attribute ID="ToDate" sfwDataType="datetime" sfwValue="idtToDate" sfwCaption="To Date" sfwAccessModifier="public" />
      <attribute ID="LastMinutes" sfwDataType="int" sfwValue="iintLastMinutes" sfwCaption="Last Minutes" sfwAccessModifier="public" />
      <attribute ID="LastDays" sfwDataType="int" sfwValue="iintLastDays" sfwCaption="Last Days" sfwAccessModifier="public" />
    </property>
    <column />
    <object />
    <collection />
    <cdocollection />
    <calculatedfields />
  </attributes>
  <ExtraFields />
  <queries>
    <group ID="Apm">
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetWebServerMeasures" sfwSql="SELECT&#xA;&#x9; count(*) RequestCount,&#xA;&#x9;ISNULL(CAST(sum(cast(TIME_IN_MS AS decimal(10,&#xA;&#x9;0))/1000)/COUNT_BIG(*) AS decimal(10,&#xA;&#x9;2)),&#xA;&#x9;0.00) AverageResponseTime,&#xA;&#x9;ISNULL(sum(case when STATUS_VALUE = 'ERR' then 1 else 0 end),&#xA;&#x9;0) ErrorCount,&#xA;&#x9;ISNULL(sum(case when STATUS_VALUE = 'SLOW' OR STATUS_VALUE = 'VSLO' then 1 else 0 end),&#xA;&#x9;0) SlowCount,&#xA;&#x9;round(cast(count(*) AS float) / case when DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) = 0 then 1 else DateDiff(MINUTE,&#xA;&#x9;min(start_time),&#xA;&#x9;max(start_time)) end,&#xA;&#x9;2) Throughput ,&#xA;&#x9;count(distinct web_server_name) AS WebServerCount,&#xA;&#x9;@START_TIME START_TIME,&#xA;&#x9;@END_TIME END_TIME&#xA;FROM&#xA;&#x9; sgs_act_log_inst_actn with(nolock) &#xA;WHERE&#xA;&#x9; start_time between @START_TIME AND&#xA;&#x9; @END_TIME AND&#xA;&#x9; web_server_name is not null">
        <parameters>
          <parameter ID="@START_TIME" sfwDataType="DateTime" />
          <parameter ID="@END_TIME" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetAppServerMeasures" sfwSql="SELECT&#xA;&#x9; count(IAD.INST_ACTN_DTL_ID) REQUEST_COUNT,&#xA;&#x9;ISNULL(cast(sum(cast(IAD.TIME_IN_MS AS decimal(10,&#xA;&#x9;0))/1000)/COUNT_BIG(*) AS decimal(10,&#xA;&#x9;2)),&#xA;&#x9;0.0) AverageResponseTime,&#xA;&#x9;ISNULL(sum(case when IAD.STATUS_VALUE = 'ERR' then 1 else 0 end),&#xA;&#x9;0) ErrorCount,&#xA;&#x9;ISNULL(sum(case when IAD.STATUS_VALUE = 'SLOW' OR IAD.STATUS_VALUE = 'VSLO' then 1 else 0 end),&#xA;&#x9;0) SlowCount,&#xA;&#x9;round(cast(count(*) AS float) / case when DateDiff(MINUTE,&#xA;&#x9;min(IAD.START_TIME),&#xA;&#x9;max(IAD.START_TIME)) = 0 then 1 else DateDiff(MINUTE,&#xA;&#x9;min(IAD.START_TIME),&#xA;&#x9;max(IAD.START_TIME)) end,&#xA;&#x9;2) Throughput,&#xA;&#x9;count(distinct IA.APPSERVER_NAME) AS AppServerCount,&#xA;&#x9;@START_TIME START_TIME,&#xA;&#x9;@END_TIME END_TIME&#xA;    &#xA;FROM&#xA;&#x9; SGS_ACT_LOG_INST_ACTN_DTL IAD with(nolock) &#xA;&#x9;INNER &#xA;&#x9;JOIN SGS_ACT_LOG_INST_ACTN IA WITH(NOLOCK)&#xA;&#x9; ON IAD.ACT_LOG_INST_ACTN_ID = IA.ACT_LOG_INST_ACTN_ID &#xA;WHERE&#xA;&#x9; IAD.START_TIME between @START_TIME AND&#xA;&#x9; @END_TIME">
        <parameters>
          <parameter ID="@START_TIME" sfwDataType="DateTime" />
          <parameter ID="@END_TIME" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetDatabaseMeasures" sfwSql="select * from &#xA;(select count(*) ActiveSession  from sys.sysprocesses with(nolock) where dbid = DB_ID() and spid&gt; 52  and dbid&gt;0 and len(hostname) &gt; 0) as T1 ,&#xA;(select CAST((mem.available_physical_memory_kb/(mem.total_physical_memory_kb*1.0)*100) as decimal(10,2)) Per_MemoryFree , (mem.total_physical_memory_kb/1024) AS TotalAvailableMemory from sys.dm_os_sys_memory mem  with(nolock)) as t2,&#xA;(select count(*) as ActiveRequests from sys.dm_exec_requests with(nolock) where session_id &gt; 50 and status &lt;&gt; 'background' and status = 'running' AND database_id = DB_ID()) as t3,&#xA;(select count(*) as blockcount from sys.sysprocesses with(nolock) where blocked &gt; 0 and dbid = DB_ID() and spid &gt; 52)  as t4">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetAppMeasures" sfwSql="SELECT * FROM&#xA;(SELECT 10 AS 'TodaysClaims') T0,&#xA;(SELECT 10 AS 'WeeklyClaims') T1,&#xA;(select count(SESSION_ID) as SESS_ROW from SGS_SESSION_STORE WITH(NOLOCK)) as T2,&#xA;(SELECT COUNT(*) as AppCount FROM SGS_ACT_LOG_APP WITH(NOLOCK)) as T3   ">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetTop5Exceptions" sfwSql="SELECT &#xA;TOP 5&#xA;&#x9;COUNT(EXCEPTION_INSTANCE_ID) AS [EXCEPTIONS],&#xA;&#x9;FORM_NAME,&#xA;&#x9;EXCEPTION_MESSAGE,&#xA;&#x9;@START_TIME START_TIME,&#xA;&#x9;@END_TIME END_TIME&#xA;FROM SGS_EXCEPTION_LOG WITH(NOLOCK) &#xA;WHERE &#xA;&#x9;(EXCEPTION_TIMESTAMP BETWEEN @START_TIME AND @END_TIME) &#xA;GROUP BY &#xA;&#x9;FORM_NAME,&#xA;&#x9;EXCEPTION_MESSAGE&#xA;ORDER BY 1 DESC ">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetTop5ThresholdQueries" sfwSql="SELECT &#xA;&#x9;TOP 5&#xA;&#x9;QUE.QUERY_REF,&#xA;&#x9;QUE.QUERY,&#xA;&#x9;MAX(DTL.TIME_IN_MS) AS TIME_IN_MS,&#xA;    @START_TIME START_TIME,&#xA;&#x9;@END_TIME END_TIME&#xA;FROM &#xA;&#x9;SGS_ACT_LOG_INST_ACTN_DTL DTL WITH(NOLOCK)  &#xA;INNER JOIN &#xA;&#x9;SGS_UNIQUE_QUERY QUE WITH(NOLOCK)&#xA;&#x9;ON &#xA;&#x9;DTL.UNIQUE_QUERY_ID = QUE.UNIQUE_QUERY_ID&#xA;WHERE &#xA;&#x9;DTL_TYPE_VALUE = 'QURY' AND &#xA;    (DTL.STATUS_VALUE = 'SLOW' OR &#xA;    DTL.STATUS_VALUE = 'VSLO') AND &#xA;    (DTL.START_TIME between @START_TIME  AND  @END_TIME) &#xA;GROUP BY &#xA;&#x9;QUE.QUERY_REF,&#xA;&#x9;QUE.QUERY&#xA;ORDER BY 3 DESC">
        <parameters>
          <parameter ID="@START_TIME" sfwDataType="DateTime" />
          <parameter ID="@END_TIME" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetJobServerMeasures" sfwSql="SELECT &#xA;IIF(COUNT([CANC]) = 0, 0, SUM([CANC])) [CANC],&#xA;IIF(COUNT([QUED]) = 0, 0, SUM([QUED])) [QUED],&#xA;IIF(COUNT([PRER]) = 0, 0, SUM([PRER])) [PRER],&#xA;IIF(COUNT([PRCS]) = 0, 0, SUM([PRCS])) [PRCS],&#xA;IIF(COUNT([PRSU]) = 0, 0, SUM([PRSU])) [PRSU]&#xA;FROM &#xA;&#x9;(select  jd.STATUS_VALUE &#xA;&#x9;from sgs_job_detail jd with(nolock) inner join SGS_CODE_VALUE cv  with(nolock)&#xA;&#x9;on jd.STATUS_VALUE = cv.CODE_VALUE&#xA;&#x9;and jd.STATUS_ID = cv.CODE_ID&#xA;&#x9;where jd.START_TIME between @start_time and @end_time&#xA;&#x9;) T&#xA;&#x9;PIVOT(&#xA;&#x9;count(STATUS_VALUE) &#xA;&#x9;FOR STATUS_VALUE IN &#xA;&#x9;([CANC],[PRCS],[PRER],[PRSU],[QUED])&#xA;&#x9;) as pivottable;&#xA;&#x9;&#xA;&#x9;">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetBPMMeasures" sfwSql="SELECT &#xA;IIF(COUNT(Request) =0, 0, SUM(Request)) as Request,&#xA;IIF(COUNT(Queue) =0, 0, SUM(Queue)) as Queue,&#xA;IIF(COUNT(ErrorCount) =0, 0, SUM(ErrorCount)) as ErrorCount FROM &#xA;(&#xA;select case when  action_type = 'BpmRequestsHandler' then 'Request' &#xA;&#x9;&#x9;when ACTION_TYPE ='Dequeue' then 'Queue' &#xA;&#x9;&#x9;else  action_type end as action_type , count(*) as NoOfItems&#xA;&#x9;&#x9;from SGW_BPM_TRACE_INST_ACTN with(nolock)  &#xA;&#x9;&#x9;where START_TIME between @start_time and @end_time &#xA;&#x9;&#x9;and action_type in ('BpmRequestsHandler','Dequeue')&#xA;&#x9;&#x9;group by ACTION_TYPE&#xA;) AS T &#xA;&#x9;&#x9;PIVOT (&#xA;&#x9;&#x9;sum(NoOfItems) &#xA;&#x9;&#x9;FOR action_type IN &#xA;&#x9;&#x9;([Request],[Queue],[ErrorCount]) &#xA;&#x9;&#x9;)as pivottable;">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetInvalidLoginMeasures" sfwSql="SELECT TOP 1 * FROM&#xA;&#x9;(SELECT&#xA;&#x9;TOP 1&#xA;&#x9;&#x9;ALA.ACT_LOG_APP_ID,&#xA;&#x9;&#x9;ALA.APP_NAME,&#xA;&#x9;&#x9;COUNT(ALI.IP_ADDRESS) AS INVALID_LOGIN_ATTEMPT&#xA;&#x9;FROM&#xA;&#x9;&#x9; SGS_ACT_LOG_INST_ACTN  LIA with(nolock) INNER  &#xA;&#x9;&#x9; JOIN SGS_ACT_LOG_INST  ALI with(nolock)&#xA;&#x9;&#x9; ON LIA.ACT_LOG_INST_ID = ALI.ACT_LOG_INST_ID  &#xA;&#x9;&#x9;INNER &#xA;&#x9;&#x9; JOIN SGS_ACT_LOG_APP ALA with(nolock)&#xA;&#x9;&#x9; ON ALA.ACT_LOG_APP_ID = ALI.ACT_LOG_APP_ID &#xA;&#x9;WHERE&#xA;&#x9;&#x9; LIA.NAME = 'InvalidLoginAttempt' AND&#xA;&#x9;&#x9; LIA.RESULT = 'InvalidLoginAttempt'&#xA;&#x9;&#x9; AND&#xA;&#x9;&#x9; LIA.START_TIME BETWEEN @start_time AND&#xA;&#x9;&#x9; @end_time &#xA;&#x9;GROUP BY  ALA.APP_NAME,&#xA;&#x9;&#x9;ALA.ACT_LOG_APP_ID&#xA;&#x9;UNION &#xA;&#x9;&#x9;(SELECT -1, 'All', 0)) T &#xA;&#x9;ORDER BY 3 DESC ">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetAppDBTrend" sfwSql="SELECT&#xA;&#x9;DATEADD(MINUTE,ROUND(DATEDIFF(MINUTE, 0, DTL.START_TIME) / 1.0,0) * 1,0) START_TIME,&#xA;&#x9;AVG(DTL.TIME_IN_MS) TIME_IN_MS &#xA;FROM&#xA;&#x9;SGS_ACT_LOG_INST_ACTN_DTL DTL WITH(NOLOCK)&#xA;INNER JOIN  &#xA;&#x9;SGS_ACT_LOG_INST_ACTN ACTN WITH(NOLOCK) ON DTL.ACT_LOG_INST_ACTN_ID = ACTN.ACT_LOG_INST_ACTN_ID &#xA;WHERE DTL.START_TIME BETWEEN @START_TIME  AND @END_TIME AND&#xA;&#x9;DTL.DTL_TYPE_VALUE = 'QURY'&#xA;GROUP BY  DATEADD(MINUTE, ROUND(DATEDIFF(MINUTE, 0, DTL.START_TIME) / 1.0,0) * 1,0) &#xA;ORDER BY START_TIME">
        <parameters>
          <parameter ID="@START_TIME" sfwDataType="DateTime" />
          <parameter ID="@END_TIME" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetDBExpensiveSteps" sfwSql="DECLARE @QUERY_THRESHOLD int;&#xA;SELECT TOP 1 @QUERY_THRESHOLD = QUERY_LIMIT FROM SGS_ACT_LOG;&#xA;WITH ACTN_DETAILS AS&#xA;(&#xA;SELECT&#xA;&#x9;TOP 50 ACTN.SOURCE,&#xA;&#x9;(SELECT TOP 1 INNER_DTL.DTL_NAME FROM SGS_ACT_LOG_INST_ACTN_DTL INNER_DTL WHERE INNER_DTL.DTL_ID = DTL.DTL_REF_ID AND INNER_DTL.DTL_TYPE_VALUE &lt;&gt; 'QURY') AS DETAIL_NAME,&#xA;&#x9;(DTL.TIME_IN_MS) TIME_IN_MS &#xA;FROM&#xA;&#x9;SGS_ACT_LOG_INST_ACTN ACTN WITH(NOLOCK)  &#xA;INNER JOIN SGS_ACT_LOG_INST_ACTN_DTL DTL WITH(NOLOCK)&#xA;&#x9;ON ACTN.ACT_LOG_INST_ACTN_ID = DTL.ACT_LOG_INST_ACTN_ID&#xA;WHERE&#xA;&#x9; ACTN.SOURCE IS NOT NULL AND &#xA;&#x9; DTL.DTL_TYPE_VALUE = 'QURY' AND&#xA;&#x9; --DTL.DTL_NAME IS NOT NULL AND&#xA;&#x9; DTL.START_TIME BETWEEN @START_TIME AND @END_TIME AND&#xA;&#x9; DTL.TIME_IN_MS &gt; @QUERY_THRESHOLD&#xA;)&#xA;&#xA;SELECT SOURCE, DETAIL_NAME, MAX(TIME_IN_MS) MAX_TIME_IN_MS,@START_TIME AS START_TIME, @END_TIME AS END_TIME FROM ACTN_DETAILS&#xA;GROUP BY    &#xA;&#x9;SOURCE,&#xA;&#x9;DETAIL_NAME&#xA;ORDER BY MAX_TIME_IN_MS DESC">
        <parameters>
          <parameter ID="@START_TIME" sfwDataType="DateTime" />
          <parameter ID="@END_TIME" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetAppServerSlowErrorCount" sfwSql="SELECT &#xA;&#x9;ACTN.APPSERVER_NAME AS  SERVER_NAME,&#xA;    SUM(CASE WHEN DTL.STATUS_VALUE = 'ERR' THEN 1 ELSE 0 END) AS  ERROR_COUNT,&#xA;&#x9;SUM(CASE WHEN DTL.STATUS_VALUE = 'SLOW' THEN 1 ELSE 0 END) AS  SLOW_COUNT,&#xA;    SUM(CASE WHEN DTL.STATUS_VALUE = 'VSLO' THEN 1 ELSE 0 END) AS  VERY_SLOW_COUNT,&#xA;    @START_TIME AS START_TIME , @END_TIME AS END_TIME&#xA;FROM SGS_ACT_LOG_INST_ACTN ACTN with(nolock)    &#xA;INNER JOIN SGS_ACT_LOG_INST_ACTN_DTL DTL with(nolock) &#xA;&#x9;ON ACTN.ACT_LOG_INST_ACTN_ID = DTL.ACT_LOG_INST_ACTN_ID&#xA;WHERE&#xA;&#x9;APPSERVER_NAME IS NOT NULL AND&#xA;&#x9;DTL.STATUS_VALUE IN ('ERR', 'SLOW', 'VSLO') AND&#xA;&#x9;DTL.START_TIME BETWEEN @START_TIME AND  @END_TIME&#xA;GROUP BY APPSERVER_NAME">
        <parameters>
          <parameter ID="@START_TIME" sfwDataType="DateTime" />
          <parameter ID="@END_TIME" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetWebServerSlowErrorCount" sfwSql="SELECT &#xA;&#x9;ACTN.WEB_SERVER_NAME AS  SERVER_NAME,&#xA;&#x9;SUM(CASE WHEN ACTN.STATUS_VALUE = 'ERR' THEN 1 ELSE 0 END) AS  ERROR_COUNT,&#xA;&#x9;SUM(CASE WHEN ACTN.STATUS_VALUE = 'SLOW' THEN 1 ELSE 0 END) AS  SLOW_COUNT,&#xA;    SUM(CASE WHEN ACTN.STATUS_VALUE = 'VSLO' THEN 1 ELSE 0 END) AS  VERY_SLOW_COUNT,&#xA;&#x9;@START_TIME AS  START_TIME,&#xA;&#x9;@END_TIME AS  END_TIME&#xA;FROM SGS_ACT_LOG_INST_ACTN ACTN with(nolock)&#xA;WHERE &#xA;&#x9;ACTN.WEB_SERVER_NAME IS NOT NULL AND &#xA;&#x9;ACTN.STATUS_VALUE IN ('ERR', 'SLOW', 'VSLO') AND&#xA;&#x9;ACTN.START_TIME BETWEEN @START_TIME AND @END_TIME&#xA;GROUP BY WEB_SERVER_NAME">
        <parameters>
          <parameter ID="@START_TIME" sfwDataType="DateTime" />
          <parameter ID="@END_TIME" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetExpensiveSteps" sfwSql="DECLARE @QUERY_THRESHOLD int;&#xA;SELECT TOP 1 @QUERY_THRESHOLD  = QUERY_LIMIT FROM SGS_ACT_LOG WITH(NOLOCK);&#xA;SELECT TOP 50 SOURCE, DTL_NAME, MAX(APP_TIME) APP_TIME,@START_TIME AS START_TIME, @END_TIME AS END_TIME &#xA;FROM &#xA;&#x9;(SELECT&#xA;&#x9;&#x9;ACTN.SOURCE,&#xA;&#x9;&#x9;DTL.DTL_NAME,&#xA;&#x9;&#x9;&#xA; &#x9;&#x9;(DTL.TIME_IN_MS - (SELECT SUM(ISNULL(TIME_IN_MS, 0)) FROM SGS_ACT_LOG_INST_ACTN_DTL INNER_DTL WHERE INNER_DTL.ACT_LOG_INST_ACTN_ID = DTL.ACT_LOG_INST_ACTN_ID AND INNER_DTL.DTL_REF_ID = DTL.DTL_ID AND INNER_DTL.DTL_TYPE_VALUE = 'QURY')) APP_TIME&#xA;&#x9;FROM&#xA;&#x9;&#x9;SGS_ACT_LOG_INST_ACTN ACTN WITH(NOLOCK)  &#xA;&#x9;INNER JOIN                         &#xA;&#x9;&#x9;SGS_ACT_LOG_INST_ACTN_DTL DTL WITH(NOLOCK) ON ACTN.ACT_LOG_INST_ACTN_ID = DTL.ACT_LOG_INST_ACTN_ID &#xA;&#x9;WHERE&#xA;&#x9;&#x9;SOURCE IS NOT NULL AND&#xA;&#x9;&#x9;DTL.DTL_TYPE_VALUE &lt;&gt; 'QURY' AND&#xA;&#x9;&#x9;DTL.TIME_IN_MS IS NOT NULL AND&#xA;&#x9;&#x9;DTL.START_TIME BETWEEN @START_TIME AND @END_TIME) AST&#xA;GROUP BY SOURCE,DTL_NAME&#xA;HAVING MAX(APP_TIME) &gt; @QUERY_THRESHOLD&#xA;ORDER BY APP_TIME desc">
        <parameters>
          <parameter ID="@START_TIME" sfwDataType="DateTime" />
          <parameter ID="@END_TIME" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetActiveSessionData" sfwSql="SELECT &#xA;&#x9;COMMAND_TEXT.TEXT AS CURRENTQUERYTEXT, &#xA;&#x9;BLOCKEDBYTEXT.TEXT  AS BLOCKEDTEXT,&#xA;&#x9;BLOCKEDBYTEXT.STATUS  AS BLOCKEDSTATUS , &#xA;&#x9;* &#xA;FROM &#xA;&#x9;SYS.SYSPROCESSES SP&#xA;CROSS APPLY &#xA;&#x9;SYS.DM_EXEC_SQL_TEXT(SP.SQL_HANDLE)   AS COMMAND_TEXT &#xA;OUTER APPLY (&#xA;&#x9;SELECT  &#xA;&#x9;&#x9;BLOCKEDTEXT.TEXT,&#xA;&#x9;&#x9;BLOCKED.STATUS &#xA;&#x9;FROM &#xA;&#x9;&#x9;SYS.SYSPROCESSES BLOCKED&#xA;&#x9;OUTER APPLY &#xA;&#x9;&#x9;SYS.DM_EXEC_SQL_TEXT(BLOCKED.SQL_HANDLE) BLOCKEDTEXT &#xA;&#x9;WHERE BLOCKED.SPID = SP.BLOCKED AND SP.BLOCKED &gt; 0 &#x9;&#xA;) BLOCKEDBYTEXT  &#xA;WHERE   &#xA;&#x9;SP.SPID&gt; 50  AND &#xA;&#x9;SP.DBID&gt;0  &#xA;&#x9;AND SP.DBID = DB_ID()">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetMostRunningQueries" sfwSql="DECLARE @LAST_DATE DATETIME = GETDATE() - 30&#xA;SELECT&#xA;&#x9;TOP 50 DTL_NAME,&#xA;&#x9;QUERY.QUERY,&#xA;&#x9;COUNT(INST_ACTN_DTL_ID) COUNT &#xA;FROM&#xA;&#x9;SGS_ACT_LOG_INST_ACTN_DTL DTL WITH(NOLOCK) &#xA;INNER JOIN &#xA;&#x9;SGS_UNIQUE_QUERY QUERY WITH(NOLOCK) &#xA;ON &#xA;&#x9;DTL.UNIQUE_QUERY_ID = QUERY.UNIQUE_QUERY_ID&#xA;WHERE &#xA;&#x9;START_TIME &gt; @LAST_DATE AND&#xA;&#x9;DTL_TYPE_VALUE = 'QURY'&#xA;GROUP BY  &#xA;&#x9;DTL.DTL_NAME,&#xA;&#x9;QUERY.QUERY &#xA;ORDER BY  COUNT DESC">
        <parameters />
      </query>
    </group>
    <group ID="APM_DB">
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetWaitTimeDetails" sfwSql="SELECT WAIT_STATS.WAIT_TYPE,&#xA;WAIT_TIME_MS,&#xA;MAX_WAIT_TIME_MS,&#xA;ROUND(CAST(WAIT_TIME_MS AS FLOAT)/ WAITING_TASKS_COUNT,2) AVG_WAIT_TIME_MS&#xA;FROM SYS.DM_OS_WAIT_STATS WAIT_STATS&#xA;WHERE (WAIT_STATS.WAIT_TYPE IN ('CXPACKET', 'RESOURCE_SEMAPHORE', 'SOS_SCHEDULER_YIELD', 'WRITELOG', 'ASYNC_NETWORK_IO')&#xA;OR&#xA;WAIT_STATS.WAIT_TYPE IN ('LCK_M_SCH_S', 'LCK_M_SCH_M', 'LCK_M_S', 'LCK_M_U', 'LCK_M_X', 'LCK_M_IS', 'LCK_M_IU', 'LCK_M_IX')&#xA;OR&#xA;WAIT_STATS.WAIT_TYPE LIKE 'PAGEIOLATCH%')&#xA;AND &#xA;WAIT_TIME_MS &gt; 0">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetTableRowCount" sfwSql="DECLARE @DB_NAME VARCHAR(20) = (SELECT DB_NAME())&#xA;EXEC DBO.SGP_GETTABLEROWCOUNTS @DB_NAME">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetIndexRecommendations" sfwSql="EXEC SGP_VALIDATE_TABLE_CONSTRAINTS">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetIndexInfo" sfwSql="DECLARE @DB_NAME VARCHAR(20) = (SELECT DB_NAME())&#xA;EXEC DBO.SGP_GETINDEXINFO @DB_NAME">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetDuplicateIndexes" sfwSql=";WITH CTE_COLUMNS AS( &#xA;&#x9;SELECT&#xA;&#x9;&#x9;COLUMN_DATA_COLS.name 'column_name',&#xA;&#x9;&#x9;INDEX_DATA_COLS.object_id,&#xA;&#x9;&#x9;INDEX_DATA_COLS.index_id,&#xA;&#x9;&#x9;INDEX_COLUMN_DATA_COLS.is_included_column,&#xA;&#x9;&#x9;INDEX_COLUMN_DATA_COLS.is_descending_key            &#xA;&#x9;FROM&#xA;&#x9;&#x9;sys.tables AS T                    &#xA;&#x9;INNER JOIN &#xA;&#x9;&#x9;sys.indexes INDEX_DATA_COLS ON T.object_id = INDEX_DATA_COLS.object_id                    &#xA;&#x9;INNER JOIN &#xA;&#x9;&#x9;sys.index_columns INDEX_COLUMN_DATA_COLS ON INDEX_DATA_COLS.object_id = INDEX_COLUMN_DATA_COLS.object_id AND&#xA;&#x9;&#x9;INDEX_DATA_COLS.index_id = INDEX_COLUMN_DATA_COLS.index_id                    &#xA;&#x9;INNER JOIN sys.columns COLUMN_DATA_COLS ON T.object_id = COLUMN_DATA_COLS.object_id AND&#xA;&#x9;&#x9;INDEX_COLUMN_DATA_COLS.column_id = COLUMN_DATA_COLS.column_id            &#xA;&#x9;WHERE&#xA;&#x9;&#x9;INDEX_COLUMN_DATA_COLS.is_included_column IN (0, 1) ),&#xA;CTE_INDEX_DATA AS(      &#xA;&#x9;SELECT&#xA;&#x9;&#x9;TABLE_DATA.name AS table_name,&#xA;&#x9;&#x9;INDEX_DATA.name AS index_name,&#xA;&#x9;&#x9;STUFF((SELECT ', ' + column_name + ' ' + CASE WHEN KEY_COLS.is_descending_key = 1 THEN 'DESC' ELSE 'ASC' END&#xA;&#x9;FROM&#xA;&#x9;&#x9;CTE_COLUMNS KEY_COLS &#xA;&#x9;WHERE&#xA;&#x9;&#x9;INDEX_DATA.object_id = KEY_COLS.object_id AND&#xA;&#x9;&#x9;INDEX_DATA.index_id = KEY_COLS.index_id AND&#xA;&#x9;&#x9;KEY_COLS.is_included_column = 0 FOR XML PATH('')), 1, 2, '') AS key_column_list ,&#xA;&#x9;&#x9;STUFF(( &#xA;&#x9;&#x9;&#x9;SELECT &#xA;&#x9;&#x9;&#x9;&#x9;', ' + column_name &#xA;&#x9;&#x9;&#x9;FROM&#xA;&#x9;&#x9;&#x9;&#x9;CTE_COLUMNS INC_COLS &#xA;&#x9;&#x9;&#x9;WHERE&#xA;&#x9;&#x9;&#x9;&#x9;INDEX_DATA.object_id = INC_COLS.object_id AND&#xA;&#x9;&#x9;&#x9;&#x9;INDEX_DATA.index_id = INC_COLS.index_id AND&#xA;&#x9;&#x9;&#x9;&#x9;INC_COLS.is_included_column = 1 FOR XML PATH('')), 1, 2, '') AS include_column_list,&#xA;&#x9;&#x9;INDEX_DATA.is_disabled &#xA;&#x9;FROM&#xA;&#x9;&#x9; sys.indexes INDEX_DATA &#xA;&#x9;INNER JOIN &#xA;&#x9;&#x9;sys.tables TABLE_DATA ON TABLE_DATA.object_id = INDEX_DATA.object_id &#xA;&#x9;INNER JOIN &#xA;&#x9;&#x9;sys.schemas SCHEMA_DATA ON SCHEMA_DATA.schema_id = TABLE_DATA.schema_id &#xA;&#x9;WHERE&#xA;&#x9;&#x9; TABLE_DATA.is_ms_shipped = 0 AND&#xA;&#x9;&#x9; TABLE_DATA.name like 'SG%' AND&#xA;&#x9;&#x9; INDEX_DATA.type_desc IN ('NONCLUSTERED',&#xA;&#x9;&#x9;'CLUSTERED'))&#xA;SELECT&#xA;&#x9;       * &#xA;FROM&#xA;&#x9; CTE_INDEX_DATA DUPE1 &#xA;WHERE&#xA;&#x9; EXISTS (SELECT&#xA;&#x9; * &#xA;FROM&#xA;&#x9; CTE_INDEX_DATA DUPE2 &#xA;WHERE&#xA;&#x9; DUPE1.table_name = DUPE2.table_name AND&#xA;&#x9; (DUPE1.key_column_list LIKE LEFT(DUPE2.key_column_list,&#xA;&#x9;LEN(DUPE1.key_column_list)) OR DUPE2.key_column_list LIKE LEFT(DUPE1.key_column_list,&#xA;&#x9;LEN(DUPE2.key_column_list))) AND&#xA;&#x9; DUPE1.index_name &lt;&gt; DUPE2.index_name)">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="CheckTempDBFiles" sfwSql="EXEC DBO.SGP_CHECKTEMPDBFILES">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetWaitCountDetails" sfwSql="SELECT WAIT_STATS.WAIT_TYPE,&#xA;WAITING_TASKS_COUNT&#xA;FROM SYS.DM_OS_WAIT_STATS WAIT_STATS&#xA;WHERE (WAIT_STATS.WAIT_TYPE IN ('CXPACKET', 'RESOURCE_SEMAPHORE', 'SOS_SCHEDULER_YIELD', 'WRITELOG', 'ASYNC_NETWORK_IO')&#xA;OR&#xA;WAIT_STATS.WAIT_TYPE IN ('LCK_M_SCH_S', 'LCK_M_SCH_M', 'LCK_M_S', 'LCK_M_U', 'LCK_M_X', 'LCK_M_IS', 'LCK_M_IU', 'LCK_M_IX')&#xA;OR&#xA;WAIT_STATS.WAIT_TYPE LIKE 'PAGEIOLATCH%')&#xA;AND &#xA;WAIT_TIME_MS &gt; 0">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetDBWaitTypes" sfwSql="IF OBJECT_ID('TEMPDB.DBO.#TEMP_WAIT_TABLE') IS NULL &#xA;BEGIN&#xA;&#x9;CREATE TABLE #TEMP_WAIT_TABLE(&#xA;&#x9;&#x9;WAIT_TYPE VARCHAR(50) NOT NULL,&#xA;&#x9;&#x9;WAIT_TYPE_DESCRIPTION VARCHAR(MAX) NOT NULL&#xA;&#x9;);&#xA;&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('SOS_SCHEDULER_YIELD','OCCURS WHEN A TASK VOLUNTARILY YIELDS THE SCHEDULER FOR OTHER TASKS TO EXECUTE. DURING THIS WAIT THE TASK IS WAITING FOR ITS QUANTUM TO BE RENEWED.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('CXPACKET','OCCURS WITH PARALLEL QUERY PLANS WHEN WAITING TO SYNCHRONIZE THE QUERY PROCESSOR EXCHANGE ITERATOR, AND WHEN PRODUCING AND CONSUMING ROWS. IF WAITING IS EXCESSIVE AND CANNOT BE REDUCED BY TUNING THE QUERY (SUCH AS ADDING INDEXES), CONSIDER ADJUSTING THE COST THRESHOLD FOR PARALLELISM OR LOWERING THE MAX DEGREE OF PARALLELISM (MAXDOP).');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('WRITELOG','OCCURS WHILE WAITING FOR A LOG FLUSH TO COMPLETE. COMMON OPERATIONS THAT CAUSE LOG FLUSHES ARE CHECKPOINTS AND TRANSACTION COMMITS.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('ASYNC_NETWORK_IO','OCCURS ON NETWORK WRITES WHEN THE TASK IS BLOCKED BEHIND THE NETWORK. VERIFY THAT THE CLIENT IS PROCESSING DATA FROM THE SERVER.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('LCK_M_S','OCCURS WHEN A TASK IS WAITING TO ACQUIRE A SHARED LOCK.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('LCK_M_U','OCCURS WHEN A TASK IS WAITING TO ACQUIRE AN UPDATE LOCK.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('LCK_M_X','OCCURS WHEN A TASK IS WAITING TO ACQUIRE AN EXCLUSIVE LOCK.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('PAGEIOLATCH_SH','OCCURS WHEN A TASK IS WAITING ON A LATCH FOR A BUFFER THAT IS IN AN I/O REQUEST. THE LATCH REQUEST IS IN SHARED MODE. LONG WAITS MAY INDICATE PROBLEMS WITH THE DISK SUBSYSTEM.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('LCK_M_IX','OCCURS WHEN A TASK IS WAITING TO ACQUIRE AN INTENT EXCLUSIVE (IX) LOCK.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('LCK_M_IU','OCCURS WHEN A TASK IS WAITING TO ACQUIRE AN INTENT UPDATE (IU) LOCK.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('PAGEIOLATCH_EX','OCCURS WHEN A TASK IS WAITING ON A LATCH FOR A BUFFER THAT IS IN AN I/O REQUEST. THE LATCH REQUEST IS IN EXCLUSIVE MODE. LONG WAITS MAY INDICATE PROBLEMS WITH THE DISK SUBSYSTEM.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('PAGEIOLATCH_UP','OCCURS WHEN A TASK IS WAITING ON A LATCH FOR A BUFFER THAT IS IN AN I/O REQUEST. THE LATCH REQUEST IS IN UPDATE MODE. LONG WAITS MAY INDICATE PROBLEMS WITH THE DISK SUBSYSTEM.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('LCK_M_SCH_M','OCCURS WHEN A TASK IS WAITING TO ACQUIRE A SCHEMA MODIFY LOCK.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('RESOURCE_SEMAPHORE','OCCURS WHEN A QUERY MEMORY REQUEST CANNOT BE GRANTED IMMEDIATELY DUE TO OTHER CONCURRENT QUERIES. HIGH WAITS AND WAIT TIMES MAY INDICATE EXCESSIVE NUMBER OF CONCURRENT QUERIES, OR EXCESSIVE MEMORY REQUEST AMOUNTS.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('LCK_M_SCH_S','OCCURS WHEN A TASK IS WAITING TO ACQUIRE A SCHEMA SHARE LOCK.');&#xA;&#x9;INSERT INTO #TEMP_WAIT_TABLE VALUES('LCK_M_IS','OCCURS WHEN A TASK IS WAITING TO ACQUIRE AN INTENT SHARED (IS) LOCK.');&#xA;END;&#xA;&#xA;SELECT WAIT_STATS.WAIT_TYPE,&#xA;WAITING_TASKS_COUNT,&#xA;WAIT_TIME_MS,&#xA;MAX_WAIT_TIME_MS,&#xA;ROUND(CAST(WAIT_TIME_MS AS FLOAT)/ WAITING_TASKS_COUNT,2) AVG_WAIT_TIME_MS,&#xA;TEMP.WAIT_TYPE_DESCRIPTION DESCRIPTION&#xA;FROM SYS.DM_OS_WAIT_STATS WAIT_STATS&#xA;INNER JOIN #TEMP_WAIT_TABLE TEMP ON TEMP.WAIT_TYPE = WAIT_STATS.WAIT_TYPE&#xA;WHERE (WAIT_STATS.WAIT_TYPE IN ('CXPACKET', 'RESOURCE_SEMAPHORE', 'SOS_SCHEDULER_YIELD', 'WRITELOG', 'ASYNC_NETWORK_IO')&#xA;OR&#xA;WAIT_STATS.WAIT_TYPE IN ('LCK_M_SCH_S', 'LCK_M_SCH_M', 'LCK_M_S', 'LCK_M_U', 'LCK_M_X', 'LCK_M_IS', 'LCK_M_IU', 'LCK_M_IX')&#xA;OR&#xA;WAIT_STATS.WAIT_TYPE LIKE 'PAGEIOLATCH%')&#xA;AND &#xA;WAIT_TIME_MS &gt; 0">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetBackupSetDetails" sfwSql="SELECT &#xA;    BACKUPSET.BACKUP_SET_ID,&#xA;    BACKUPSET.NAME AS BACKUPSET_NAME,&#xA;    CASE BACKUPSET.TYPE &#xA;    WHEN 'D' THEN 'DATABASE' &#xA;    WHEN 'L' THEN 'LOG' &#xA;    END AS BACKUP_TYPE,  &#xA;    ROUND(CAST(BACKUPSET.BACKUP_SIZE AS FLOAT)/ 1000000, 2) BACKUP_SIZE_IN_MB, &#xA;    CASE BACKUPMEDIAFAMILY.DEVICE_TYPE&#xA;    WHEN 2 THEN 'DISK'&#xA;    WHEN 5 THEN 'TAPE'&#xA;    WHEN 7 THEN 'VIRTUAL DEVICE'&#xA;    WHEN 9 THEN 'AZURE STORAGE'&#xA;    WHEN 105 THEN 'A PERMANENT BACKUP DEVICE'&#xA;    END AS DEVICE_TYPE,&#xA;    BACKUPSET.BACKUP_START_DATE, &#xA;    DATEPART(SECOND, BACKUPSET.BACKUP_FINISH_DATE - BACKUPSET.BACKUP_START_DATE) TIME_REQUIRED_IN_SECONDS, &#xA;    BACKUPMEDIAFAMILY.PHYSICAL_DEVICE_NAME&#xA;FROM MSDB.DBO.BACKUPMEDIAFAMILY BACKUPMEDIAFAMILY&#xA;INNER JOIN MSDB.DBO.BACKUPSET BACKUPSET ON BACKUPMEDIAFAMILY.MEDIA_SET_ID = BACKUPSET.MEDIA_SET_ID &#xA;WHERE BACKUPSET.DATABASE_NAME = DB_NAME() AND BACKUPSET.BACKUP_START_DATE &gt;= GETDATE() - 7&#xA;ORDER BY BACKUPSET.BACKUP_FINISH_DATE DESC">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetLastBackupDetails" sfwSql="SELECT&#xA;&#x9;MSDB.DBO.BACKUPSET.DATABASE_NAME,&#xA;&#x9;MAX(MSDB.DBO.BACKUPSET.BACKUP_FINISH_DATE) AS LAST_DB_BACKUP_DATE,&#xA;&#x9;DATEDIFF(HH,MAX(MSDB.DBO.BACKUPSET.BACKUP_FINISH_DATE),GETDATE()) AS [BACKUP AGE (HOURS)],&#xA;&#x9;CASE &#xA;&#x9;WHEN DATEDIFF(HH,MAX(MSDB.DBO.BACKUPSET.BACKUP_FINISH_DATE),GETDATE()) &gt;= 24 THEN 'OUTDATED'&#xA;&#x9;ELSE 'BACKED UP'&#xA;&#x9;END BACKUP_STATUS&#xA;FROM&#xA;&#x9;MSDB.DBO.BACKUPSET &#xA;WHERE&#xA;&#x9;MSDB.DBO.BACKUPSET.TYPE = 'D' AND MSDB.DBO.BACKUPSET.DATABASE_NAME = DB_NAME() &#xA;GROUP BY  &#xA;    MSDB.DBO.BACKUPSET.DATABASE_NAME">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="DefaultGrowthSettingRecommendation" sfwSql="WITH TEMP (NAME,FILENAME,GROWTH,USAGE) &#xA;AS(&#xA;SELECT NAME, FILENAME,&#xA;'GROWTH' = (CASE STATUS &amp; 0X100000 WHEN 0X100000 THEN&#xA;CONVERT(NVARCHAR(15), GROWTH) + N'%'&#xA;ELSE&#xA;CONVERT(NVARCHAR(15), CONVERT (BIGINT, GROWTH) * 8) + N'KB' END),&#xA;'USAGE' = (CASE STATUS &amp; 0X40 WHEN 0X40 THEN 'log only' ELSE 'data only' END)&#xA;FROM SYSFILES WITH(NOLOCK))&#xA;&#xA;SELECT &#xA;TEMP.NAME,TEMP.filename,TEMP.growth,TEMP.usage,&#xA;CASE &#xA;WHEN  TEMP.growth = '1024KB' AND Temp.usage = 'data only' THEN 'Change default setting/Adjust database growth to your weekly DB growth size.'&#xA;WHEN  TEMP.growth = '10%' AND Temp.usage = 'log only' THEN 'Change default Settings/ % Type growth is not recommended.'&#xA;WHEN  RIGHT(TEMP.growth,1) = '%' THEN '% Type growth is not recommended.'&#xA;ELSE ''&#xA;END&#xA;AS [AutoGrowthRecommendation]&#xA;FROM Temp &#xA;WHERE (Temp.usage = 'data only' AND Temp.growth = '1024KB') &#xA;   OR (Temp.usage = 'log only' AND Temp.growth = '10%')&#xA;ORDER BY Temp.NAME">
        <parameters />
      </query>
      <query sfwQueryType="SelectQuery" sfwDataType="EntityTable" ID="GetAutoGrowthEventDetails" sfwSql="EXEC SGP_GetAutogrowthEventDetails 2">
        <parameters />
      </query>
    </group>
    <group ID="BaseGroup">
      <query ID="GetWebServerList" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xA;&#x9;ACTN.WEB_SERVER_NAME AS  SERVER_NAME, &#xA;&#x9;COUNT(ACTN.ACT_LOG_INST_ACTN_ID) AS  REQUEST_COUNT,&#xA;&#x9;ISNULL(CAST(SUM(CAST(TIME_IN_MS AS DECIMAL(10,0))/1000)/COUNT_BIG(ACTN.ACT_LOG_INST_ACTN_ID) AS DECIMAL(10,2)),0.0) AS  AVERAGE_RESPONSE_TIME,&#xA;&#x9;MAX(ACTN.START_TIME) AS  LAST_REQUEST,&#xA;&#x9;MIN(ACTN.START_TIME) AS  FIRST_REQUEST,&#xA;&#x9;SUM(CASE WHEN ACTN.STATUS_VALUE = 'ERR' THEN 1 ELSE 0 END) AS  ERROR_COUNT,&#xA;&#x9;SUM(CASE WHEN ACTN.STATUS_VALUE = 'SLOW' THEN 1 ELSE 0 END) AS  SLOW_COUNT,&#xA;&#x9;ROUND(CAST(COUNT(ACTN.ACT_LOG_INST_ACTN_ID) AS FLOAT) / &#xA;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;WHEN DATEDIFF(MINUTE, MIN(ACTN.START_TIME), MAX(ACTN.START_TIME)) = 0 THEN 1 &#xA;&#x9;&#x9;&#x9;ELSE DATEDIFF(MINUTE, MIN(ACTN.START_TIME), MAX(ACTN.START_TIME)) &#xA;&#x9;&#x9;END, 2) AS  THROUGHPUT,&#xA;&#x9;@start_time AS  START_TIME,&#xA;&#x9;@end_time AS  END_TIME&#xA;FROM SGS_ACT_LOG_INST_ACTN ACTN with(nolock)&#xA;WHERE ACTN.START_TIME BETWEEN @start_time AND @end_time AND&#xA;&#x9;ACTN.WEB_SERVER_NAME IS NOT NULL&#xA;GROUP BY WEB_SERVER_NAME&#xA;ORDER BY LAST_REQUEST DESC" sfwOracle="SELECT web_server_name ServerName,&#xD;&#xA;&#x9;      count(*) RequestCount,&#xD;&#xA;&#x9;      round(sum(time_in_ms) / count(*),2) AverageResponseTime,&#xD;&#xA;&#x9;      max(start_time) LastRequest,&#xD;&#xA;&#x9;      min(start_time) FirstRequest,&#xD;&#xA;&#x9;      sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xD;&#xA;&#x9;      sum(case when time_in_ms &gt; transaction_limit then 1 else 0 end) SlowCount,&#xD;&#xA;        ROUND(cast(count(*) as float) / case when (( max(start_time)- min(start_time))*24*60) = 0 then 1 else ((max(start_time) - min(start_time))*24*60) end, 2) Throughput&#xD;&#xA;        ,@start_time as Start_time ,&#xD;&#xA;        @end_time as End_time&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn,&#xD;&#xA;&#x9;     sgs_act_log&#xD;&#xA;WHERE&#xD;&#xA;&#x9;    web_server_name is not null   AND&#xD;&#xA;&#x9;     start_time between @start_time AND @end_time&#xD;&#xA;GROUP BY web_server_name &#xD;&#xA;ORDER BY 4 desc">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetAppServerList" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xA;&#x9;ACTN.APPSERVER_NAME AS  SERVER_NAME,&#xA;    COUNT(INST_ACTN_DTL_ID) AS  REQUEST_COUNT,&#xA;    ISNULL(CAST(SUM(CAST(DTL.TIME_IN_MS AS DECIMAL(10,0))/1000)/COUNT_BIG(INST_ACTN_DTL_ID) AS DECIMAL(10,2)),0.0) AS  AVERAGE_RESPONSE_TIME,&#xA;    MAX(DTL.START_TIME) AS  LAST_REQUEST,&#xA;    MIN(DTL.START_TIME) AS  FIRST_REQUEST,&#xA;    SUM(CASE WHEN DTL.STATUS_VALUE = 'ERR' THEN 1 ELSE 0 END) AS  ERROR_COUNT,&#xA;&#x9;SUM(CASE WHEN DTL.STATUS_VALUE = 'SLOW' THEN 1 ELSE 0 END) AS  SLOW_COUNT,&#xA;    ROUND(CAST(COUNT(INST_ACTN_DTL_ID) AS FLOAT) / &#xA;&#x9;&#x9;CASE &#xA;&#x9;&#x9;&#x9;WHEN DATEDIFF(MINUTE, MIN(DTL.START_TIME), MAX(DTL.START_TIME)) = 0 THEN 1 &#xA;&#x9;&#x9;&#x9;ELSE DATEDIFF(MINUTE, MIN(DTL.START_TIME), MAX(DTL.START_TIME)) &#xA;&#x9;&#x9;END, 2) AS  THROUGHPUT,&#xA;    @start_time AS START_TIME , @end_time AS END_TIME&#xA;FROM SGS_ACT_LOG_INST_ACTN ACTN with(nolock)    &#xA;INNER JOIN SGS_ACT_LOG_INST_ACTN_DTL DTL with(nolock) &#xA;&#x9;ON ACTN.ACT_LOG_INST_ACTN_ID = DTL.ACT_LOG_INST_ACTN_ID&#xA;WHERE&#xA;&#x9;    APPSERVER_NAME IS NOT NULL AND&#xA;&#x9;    DTL.START_TIME BETWEEN @start_time AND  @end_time    &#xA;GROUP BY APPSERVER_NAME     &#xA;ORDER BY LAST_REQUEST desc" sfwOracle="SELECT appserver_name ServerName,&#xD;&#xA;             count(*) RequestCount,&#xD;&#xA;             Round(sum(time_in_ms) / count(*)) AverageResponseTime,&#xD;&#xA;             max(start_time) LastRequest,&#xD;&#xA;             min(start_time) FirstRequest,&#xD;&#xA;             sum(case when error_message is null then 0 else 1 end) ErrorCount,&#xD;&#xA;             sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) SlowCount,&#xD;&#xA;              round(cast(count(*) as binary_double) / case when (max(start_time) - min(start_time)) * 1440 = 0 &#xD;&#xA;              then 1 else (max(start_time) - min(start_time)) * 1440 end, 2) Throughput,&#xD;&#xA;              @start_time  Start_time , @end_time End_time&#xD;&#xA;FROM        &#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step ,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time         &#xD;&#xA;GROUP BY appserver_name     &#xD;&#xA;ORDER BY 4 desc">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetDbActiveConnections" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from &#xD;&#xA;(select count(*) ActiveSession  from sys.sysprocesses where DB_NAME(dbid) = 'NeoBase_Dev_IT2'and  spid&gt; 52  and dbid&gt;0 and len(hostname) &gt; 0) as T1 ,&#xD;&#xA;(select (mem.available_physical_memory_kb/(mem.total_physical_memory_kb*1.0)*100) Per_MemoryFree , (mem.total_physical_memory_kb/1024) AS TotalAvailableMemory from sys.dm_os_sys_memory mem ) as t2,&#xD;&#xA;(select count(*) as ActiveRequests from sys.dm_exec_requests where session_id &gt; 50 and status &lt;&gt; 'background' and status = 'running') as t3" sfwOracle="select * from (Select count(*) ActiveSession From V$session),&#xD;&#xA;              (select&#xD;&#xA;                 min(value)/1024/1024 Per_MemoryFree&#xD;&#xA;              from&#xD;&#xA;                 dba_hist_osstat&#xD;&#xA;              where&#xD;&#xA;                 stat_name ='FREE_MEMORY_BYTES'),&#xD;&#xA;            (select&#xD;&#xA;             max(value)/1024/1024 TotalAvailableMemory&#xD;&#xA;              from&#xD;&#xA;                 dba_hist_osstat&#xD;&#xA;              where&#xD;&#xA;                 stat_name = 'PHYSICAL_MEMORY_BYTES'),&#xD;&#xA;            (select count(*) ActiveRequests from v$Session where sid &gt;50 and status='ACTIVE' and service_name='SYS$BACKGROUND')">
        <parameters />
      </query>
      <query ID="GetDBMissingIndex" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @DB_NAME VARCHAR(20) = (SELECT DB_NAME())&#xA;EXEC DBO.SGP_GETDBMISSINGINDEX @DB_NAME">
        <parameters />
      </query>
      <query ID="GetBPMServerList" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select count(*) ItemProcessed , inst.ENGINE_NAME , @start_time as 'Start_time' , @end_time  as 'End_time' from SGW_BPM_TRACE_INSTANCE inst with(nolock)  &#xD;&#xA;&#x9;&#x9;inner  join SGW_BPM_TRACE_INST_ACTN  act with(nolock) &#xD;&#xA;&#x9;&#x9;on  inst.TRACE_INSTANCE_ID = act.TRACE_INSTANCE_ID&#xD;&#xA;&#x9;&#x9;where inst.START_TIME between @start_time and @end_time &#xD;&#xA;&#x9;&#x9;group by inst.ENGINE_NAME" sfwOracle="select count(*) ItemProcessed , inst.ENGINE_NAME , @start_time as Start_time , @end_time  as End_time from SGW_BPM_TRACE_INSTANCE inst  &#xD;&#xA;&#x9;&#x9;inner  join SGW_BPM_TRACE_INST_ACTN  act&#xD;&#xA;&#x9;&#x9;on  inst.TRACE_INSTANCE_ID = act.TRACE_INSTANCE_ID&#xD;&#xA;&#x9;&#x9;where inst.START_TIME between @start_time and @end_time &#xD;&#xA;&#x9;&#x9;group by inst.ENGINE_NAME">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetDBCpuUtilization" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT available_physical_memory_kb/1024 as &quot;Total Memory MB&quot;,&#xD;&#xA; available_physical_memory_kb/(total_physical_memory_kb*1.0)*100 AS &quot;% Memory Free&quot;&#xD;&#xA;FROM sys.dm_os_sys_memory" sfwOracle="select * from  (select&#xD;&#xA;             max(value)/1024/1024 &quot;Total Memory MB&quot;&#xD;&#xA;              from&#xD;&#xA;                 dba_hist_osstat&#xD;&#xA;              where&#xD;&#xA;                 stat_name = 'PHYSICAL_MEMORY_BYTES'),&#xD;&#xA;                 (select&#xD;&#xA;                 min(value)/1024/1024 &quot;% Memory Free&quot;&#xD;&#xA;              from&#xD;&#xA;                 dba_hist_osstat&#xD;&#xA;              where&#xD;&#xA;                 stat_name ='FREE_MEMORY_BYTES')">
        <parameters />
      </query>
      <query ID="GetDBFreeSize" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT &#xD;&#xA;&#x9;&#x9;volume_mount_point [Disk Mount Point], &#xD;&#xA;&#x9;&#x9;CONVERT(DECIMAL(18,2),total_bytes/1073741824.0) AS [Total Size in GB], ---1GB = 1073741824 bytes&#xD;&#xA;&#x9;&#x9;CONVERT(DECIMAL(18,2),available_bytes/1073741824.0) AS [Available Size in GB],  &#xD;&#xA;&#x9;&#x9;CAST(CAST(available_bytes AS FLOAT)/ CAST(total_bytes AS FLOAT) AS DECIMAL(18,2)) * 100 AS [Space Free %] &#xD;&#xA;FROM sys.master_files &#xD;&#xA;CROSS APPLY sys.dm_os_volume_stats(database_id, file_id)">
        <parameters />
      </query>
      <query ID="GetGBMissingIndex" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT db.[name] AS [DatabaseName]&#xD;&#xA;    ,id.[object_id] AS [ObjectID]&#xD;&#xA;&#x9;,OBJECT_NAME(id.[object_id], db.[database_id]) AS [ObjectName]&#xD;&#xA;    ,id.[statement] AS [FullyQualifiedObjectName]&#xD;&#xA;    ,id.[equality_columns] AS [EqualityColumns]&#xD;&#xA;    ,id.[inequality_columns] AS [InEqualityColumns]&#xD;&#xA;    ,id.[included_columns] AS [IncludedColumns]&#xD;&#xA;    ,gs.[unique_compiles] AS [UniqueCompiles]&#xD;&#xA;    ,gs.[user_seeks] AS [UserSeeks]&#xD;&#xA;    ,gs.[user_scans] AS [UserScans]&#xD;&#xA;    ,gs.[last_user_seek] AS [LastUserSeekTime]&#xD;&#xA;    ,gs.[last_user_scan] AS [LastUserScanTime]&#xD;&#xA;    ,gs.[avg_total_user_cost] AS [AvgTotalUserCost]  -- Average cost of the user queries that could be reduced by the index in the group.&#xD;&#xA;    ,gs.[avg_user_impact] AS [AvgUserImpact]  -- The value means that the query cost would on average drop by this percentage if this missing index group was implemented.&#xD;&#xA;    ,gs.[system_seeks] AS [SystemSeeks]&#xD;&#xA;    ,gs.[system_scans] AS [SystemScans]&#xD;&#xA;    ,gs.[last_system_seek] AS [LastSystemSeekTime]&#xD;&#xA;    ,gs.[last_system_scan] AS [LastSystemScanTime]&#xD;&#xA;    ,gs.[avg_total_system_cost] AS [AvgTotalSystemCost]&#xD;&#xA;    ,gs.[avg_system_impact] AS [AvgSystemImpact]  -- Average percentage benefit that system queries could experience if this missing index group was implemented.&#xD;&#xA;    ,gs.[user_seeks] * gs.[avg_total_user_cost] * (gs.[avg_user_impact] * 0.01) AS [IndexAdvantage]&#xD;&#xA;    ,'CREATE INDEX [IX_' + OBJECT_NAME(id.[object_id], db.[database_id]) + '_' + REPLACE(REPLACE(REPLACE(ISNULL(id.[equality_columns], ''), ', ', '_'), '[', ''), ']', '') + CASE&#xD;&#xA;        WHEN id.[equality_columns] IS NOT NULL&#xD;&#xA;            AND id.[inequality_columns] IS NOT NULL&#xD;&#xA;            THEN '_'&#xD;&#xA;        ELSE ''&#xD;&#xA;        END + REPLACE(REPLACE(REPLACE(ISNULL(id.[inequality_columns], ''), ', ', '_'), '[', ''), ']', '') + '_' + LEFT(CAST(NEWID() AS [nvarchar](64)), 5) + ']' + ' ON ' + id.[statement] + ' (' + ISNULL(id.[equality_columns], '') + CASE&#xD;&#xA;        WHEN id.[equality_columns] IS NOT NULL&#xD;&#xA;            AND id.[inequality_columns] IS NOT NULL&#xD;&#xA;            THEN ','&#xD;&#xA;        ELSE ''&#xD;&#xA;        END + ISNULL(id.[inequality_columns], '') + ')' + ISNULL(' INCLUDE (' + id.[included_columns] + ')', '') AS [ProposedIndex]&#xD;&#xA;    ,CAST(CURRENT_TIMESTAMP AS [smalldatetime]) AS [CollectionDate]&#xD;&#xA;FROM [sys].[dm_db_missing_index_group_stats] gs WITH (NOLOCK)&#xD;&#xA;INNER JOIN [sys].[dm_db_missing_index_groups] ig WITH (NOLOCK) ON gs.[group_handle] = ig.[index_group_handle]&#xD;&#xA;INNER JOIN [sys].[dm_db_missing_index_details] id WITH (NOLOCK) ON ig.[index_handle] = id.[index_handle]&#xD;&#xA;INNER JOIN [sys].[databases] db WITH (NOLOCK) ON db.[database_id] = id.[database_id]&#xD;&#xA;WHERE  db.[database_id] = DB_ID()&#xD;&#xA;--AND OBJECT_NAME(id.[object_id], db.[database_id]) = 'YourTableName'&#xD;&#xA;ORDER BY ObjectName,  [AvgUserImpact] desc&#xD;&#xA;OPTION (RECOMPILE);">
        <parameters />
      </query>
      <query ID="GetAllDBActiveSession" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from sys.sysprocesses where DB_NAME(dbid) = 'NeoBase_Dev_IT2'and  spid&gt; 50  and dbid&gt;0 and len(hostname) &gt; 0" sfwOracle="select * from v$Session where sid &gt;50">
        <parameters />
      </query>
      <query ID="GetDBAllActiveRequests" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT r.session_id,r.start_time,r.status,r.command ,t.*&#xD;&#xA;FROM sys.dm_exec_requests AS r&#xD;&#xA;CROSS APPLY sys.dm_exec_sql_text(r.sql_handle) AS t" sfwOracle="select sid,status,command,SQL.* from v$Session&#xD;&#xA;CROSS APPLY V$SQLtext SQL;">
        <parameters />
      </query>
      <query ID="GetAllDBCpuTime" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @DB_NAME VARCHAR(20) = (SELECT DB_NAME())&#xA;EXEC DBO.SGP_GETALLDBCPUTIME @DB_NAME" sfwOracle="select SUBSTR(SqlMonitor.SQL_TEXT,stat.STARTS),stat.EXECUTIONS execution_count,SqlMonitor.DISK_READS logical_reads,stat.LAST_DISK_READS last_logical_read&#xD;&#xA;,stat.DISK_WRITES logical_write,stat.LAST_DISK_WRITES last_logical_writes, SqlMonitor.CPU_TIME total_worker_time,stat.ELAPSED_TIME total_elapsed_time_in_S,&#xD;&#xA;stat.LAST_ELAPSED_TIME last_elapsed_time_in_S,SqlMonitor.LAST_REFRESH_TIME last_execution_time&#xD;&#xA;from  V$SQL_PLAN_STATISTICS stat &#xD;&#xA;cross apply V$SQL_MONITOR SqlMonitor&#xD;&#xA;order by SqlMonitor.CPU_TIME DESC">
        <parameters />
      </query>
      <query ID="GetAllDBLogicalReads" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @DB_NAME VARCHAR(20) = (SELECT DB_NAME())&#xA;EXEC  DBO.SGP_GETALLDBLOGICALREADS @DB_NAME" sfwOracle="select SUBSTR(SqlMonitor.SQL_TEXT,stat.STARTS),stat.EXECUTIONS execution_count,SqlMonitor.DISK_READS logical_reads,stat.LAST_DISK_READS last_logical_read&#xD;&#xA;,stat.DISK_WRITES logical_write,stat.LAST_DISK_WRITES last_logical_writes, SqlMonitor.CPU_TIME total_worker_time,stat.ELAPSED_TIME total_elapsed_time_in_S,&#xD;&#xA;stat.LAST_ELAPSED_TIME last_elapsed_time_in_S,SqlMonitor.LAST_REFRESH_TIME last_execution_time&#xD;&#xA;from  V$SQL_PLAN_STATISTICS stat &#xD;&#xA;cross apply V$SQL_MONITOR SqlMonitor&#xD;&#xA;order by SqlMonitor.DISK_READS DESC">
        <parameters />
      </query>
      <query ID="GetAllDBLogicalWrites" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @DB_NAME VARCHAR(20) = (SELECT DB_NAME())&#xA;EXEC DBO.SGP_GETALLDBLOGICALWRITES @DB_NAME" sfwOracle="select SUBSTR(SqlMonitor.SQL_TEXT,stat.STARTS),stat.EXECUTIONS execution_count,SqlMonitor.DISK_READS logical_reads,stat.LAST_DISK_READS last_logical_read&#xD;&#xA;,stat.DISK_WRITES logical_write,stat.LAST_DISK_WRITES last_logical_writes, SqlMonitor.CPU_TIME total_worker_time,stat.ELAPSED_TIME total_elapsed_time_in_S,&#xD;&#xA;stat.LAST_ELAPSED_TIME last_elapsed_time_in_S,SqlMonitor.LAST_REFRESH_TIME last_execution_time&#xD;&#xA;from  V$SQL_PLAN_STATISTICS stat &#xD;&#xA;cross apply V$SQL_MONITOR SqlMonitor&#xD;&#xA;order by stat.DISK_WRITES DESC">
        <parameters />
      </query>
      <query ID="GetAllDBGrowthMonthly" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @DATE DATE,@END_TIME DATE,@START_TIME DATE;&#xA;SET @DATE=(SELECT MAX(BACKUP_START_DATE) FROM MSDB.DBO.BACKUPSET WITH(NOLOCK));&#xA;SET @END_TIME= DATEADD(DAY,-DAY(@DATE)+1,@DATE) ;&#xA;SET @START_TIME= DATEADD(MONTH,-11,@END_TIME);&#xA;WITH CTE AS (&#xA;SELECT MONTH([BACKUP_START_DATE])  AS &quot;MONTH&quot;,&#xA;YEAR([BACKUP_START_DATE]) AS &quot;YEAR&quot;,&#xA;AVG([BACKUP_SIZE]/1024/1024) AS &quot;BACKUPSIZEMB&quot;,&#xA;AVG([COMPRESSED_BACKUP_SIZE]/1024/1024) AS &quot;COMPRESSED BACKUP SIZE MB&quot;,&#xA;AVG([BACKUP_SIZE]/[COMPRESSED_BACKUP_SIZE]) AS &quot;COMPRESSION RATIO&quot;&#xA;FROM MSDB.DBO.BACKUPSET  WITH(NOLOCK) WHERE DATABASE_NAME = DB_NAME() AND BACKUP_START_DATE BETWEEN @START_TIME AND DATEADD(MONTH,+1,@END_TIME)&#xA;GROUP BY MONTH([BACKUP_START_DATE]) , YEAR([BACKUP_START_DATE])&#xA;)&#xA;SELECT CONVERT(CHAR(3),DATENAME(MONTH,CAST((CAST([YEAR] AS CHAR(4)) + '-' + CAST([MONTH] AS CHAR(2)) + '-' +'01') AS CHAR(10)))) + ' - ' + CAST(YEAR AS CHAR(4)) AS &quot;MONTH&quot;,&#xA;YEAR,&#xA;BACKUPSIZEMB,&#xA;[COMPRESSED BACKUP SIZE MB],&#xA;[COMPRESSION RATIO] &#xA;FROM CTE ORDER BY YEAR">
        <parameters>
          <parameter ID="@DataBaseName" sfwDataType="string" />
        </parameters>
      </query>
      <query ID="GetUserWiseCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="declare @transaction_limit int  &#xD;&#xA;select @transaction_limit= transaction_limit from sgs_act_log;&#xD;&#xA;select inst.ACTOR_NAME ,&#xD;&#xA;count(*) as RequestCount,&#xD;&#xA;sum(time_in_ms) / count(*) AverageResponseTime,&#xD;&#xA;max(act.start_time) LastRequest,&#xD;&#xA;min(act.start_time) FirstRequest,&#xD;&#xA; sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xD;&#xA;&#x9;      sum(case when time_in_ms &gt; @transaction_limit then 1 else 0 end) SlowCount,&#xD;&#xA;              round(cast(count(*) as float) / case when DateDiff(MINUTE, min(act.start_time), max(act.start_time)) = 0 then 1 else DateDiff(MINUTE, min(act.start_time), max(act.start_time)) end, 2) Throughput&#xD;&#xA;               ,@start_time as 'Start_time' , @end_time as 'End_time'&#xD;&#xA;from SGS_ACT_LOG_INST inst&#xD;&#xA;inner join SGS_ACT_LOG_INST_ACTN act &#xD;&#xA;on inst.ACT_LOG_INST_ID = act.ACT_LOG_INST_ID    &#xD;&#xA;where act.start_time between  @start_time  AND  @end_time   &#xD;&#xA;and  len(ACTOR_NAME ) &gt; 0&#xD;&#xA;group by inst.ACTOR_NAME" sfwOracle="SELECT INST.ACTOR_NAME,&#xD;&#xA;      COUNT(*) REQUESTCOUNT ,&#xD;&#xA;      SUM(TIME_IN_MS) / COUNT(*) AVERAGERESPONSETIME ,&#xD;&#xA;      MAX(ACT.START_TIME) LASTREQUEST,&#xD;&#xA;      MIN(ACT.START_TIME) FIRSTREQUEST,&#xD;&#xA;       SUM(CASE WHEN ERROR_FLAG = 'y' THEN 1 ELSE 0 END) ERRORCOUNT,&#xD;&#xA;              SUM(CASE WHEN TIME_IN_MS &gt; (SELECT transaction_limit  FROM sgs_act_log WHERE ROWNUM = 1) THEN 1 ELSE 0 END) SLOWCOUNT,&#xD;&#xA;                    ROUND(CAST(COUNT(*) AS BINARY_DOUBLE) / CASE WHEN (MAX(ACT.START_TIME) - MIN(ACT.START_TIME)) * 1440 = 0 THEN 1 ELSE (MAX(ACT.START_TIME) - MIN(ACT.START_TIME)) * 1440 END, 2) THROUGHPUT&#xD;&#xA;                     ,SYSDATE-2 AS START_TIME , SYSDATE AS END_TIME &#xD;&#xA;      FROM SGS_ACT_LOG_INST INST&#xD;&#xA;      INNER JOIN SGS_ACT_LOG_INST_ACTN ACT&#xD;&#xA;      ON INST.ACT_LOG_INST_ID = ACT.ACT_LOG_INST_ID    &#xD;&#xA;      WHERE ACT.START_TIME BETWEEN  SYSDATE-2  AND  SYSDATE   &#xD;&#xA;      AND  LENGTH(RTRIM(ACTOR_NAME )) &gt; 0&#xD;&#xA;      GROUP BY INST.ACTOR_NAME">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetSummaryByWebServer" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT web_server_name ServerName,&#xA;&#x9;      count(*) RequestCount,&#xA;&#x9;      sum(time_in_ms) / count(*) AverageResponseTime,&#xA;&#x9;      max(start_time) LastRequest,&#xA;&#x9;      min(start_time) FirstRequest,&#xA;&#x9;      sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xA;&#x9;      sum(case when time_in_ms &gt; transaction_limit then 1 else 0 end) SlowCount,&#xA;              round(cast(count(*) as float) / case when DateDiff(MINUTE, min(start_time), max(start_time)) = 0 then 1 else DateDiff(MINUTE, min(start_time), max(start_time)) end, 2) Throughput&#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn,&#xA;&#x9;     sgs_act_log&#xA;WHERE&#xA;&#x9;    web_server_name is not null   AND&#xA;&#x9;     start_time between @start_time AND   @end_time    &#xA;GROUP BY web_server_name&#xA;ORDER BY 4 desc" sfwOracle="SELECT web_server_name ServerName,&#xD;&#xA;&#x9;      count(*) RequestCount,&#xD;&#xA;&#x9;      round(sum(time_in_ms) / count(*),2) AverageResponseTime,&#xD;&#xA;&#x9;      max(start_time) LastRequest,&#xD;&#xA;&#x9;      min(start_time) FirstRequest,&#xD;&#xA;&#x9;      sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xD;&#xA;&#x9;      sum(case when time_in_ms &gt; transaction_limit then 1 else 0 end) SlowCount,&#xD;&#xA;        ROUND(cast(count(*) as float) / case when ((max(start_time)-min(start_time))*24*60) = 0 then 1 else ((max(start_time)-min(start_time))*24*60) end, 2) Throughput&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn,&#xD;&#xA;&#x9;     sgs_act_log&#xD;&#xA;WHERE&#xD;&#xA;&#x9;    web_server_name is not null   AND&#xD;&#xA;&#x9;     start_time between @start_time AND   @end_time     &#xD;&#xA;GROUP BY web_server_name &#xD;&#xA;ORDER BY 4 desc">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetSummarByBusinessTransaction" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select sum(time_in_ms) / count(*) ResponseTime, &#xA;       case when charindex('(', action_name) &gt; 0 then left(action_name, charindex('(', action_name)-1) else action_name end + '.' +  &#xA;       (case when isnull(action_target,'') = '' then action_source else action_target end) ActionName,&#xA;&#x9;   max(time_in_ms) MaxResponseTime,&#xA;       count(*) Calls, &#xA;       round(cast(count(*) as float) / case when DateDiff(MINUTE, min(start_time), max(start_time)) = 0 then 1 else DateDiff(MINUTE, min(start_time), max(start_time)) end, 2) CallsPerMin,&#xA;       sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xA;       sum(case when time_in_ms &gt; b.TRANSACTION_HIGH_LIMIT then 1 else 0 end) SlowCount&#xA;from sgs_act_log_inst_actn,&#xA;     sgs_act_log b&#xA;where web_server_name is not null&#xA;  and start_time between @start_time and @end_time&#xA;group by case when charindex('(', action_name) &gt; 0 then left(action_name, charindex('(', action_name)-1) else action_name end + '.' +  &#xA;     (case when isnull(action_target,'') = '' then action_source else action_target  end)&#xA;order by max(time_in_ms) desc" sfwOracle="select Round(sum(time_in_ms) / count(*),2) ResponseTime, &#xD;&#xA;       case when instr(action_name,'(') &gt; 0 then COALESCE(substr(action_name, 0,case when instr(action_name,'(') =0 then instr(action_name,'(') else instr(action_name,'(')-1 end),'') else action_name end || '.' ||  &#xD;&#xA;       (case when COALESCE(action_target,'null') = 'null' then action_source else action_target end) ActionName,&#xD;&#xA;&#x9;   max(time_in_ms) MaxResponseTime,&#xD;&#xA;       count(*) Calls, &#xD;&#xA;       Round(cast(count(*) as float) / case when ((max(start_time)- min(start_time))*24*60) = 0 then 1 else ((max(start_time) - min(start_time))*24*60) end, 2) CallsPerMin,&#xD;&#xA;       sum(case when error_flag = 'y' then 1 else 0 end) ErrorCount,&#xD;&#xA;       sum(case when time_in_ms &gt; b.TRANSACTION_HIGH_LIMIT then 1 else 0 end) SlowCount&#xD;&#xA;from sgs_act_log_inst_actn,&#xD;&#xA;     sgs_act_log b&#xD;&#xA;where web_server_name is not null&#xD;&#xA;  and start_time between @start_time AND @end_time&#xD;&#xA;group by case when instr(action_name,'(') &gt; 0 then COALESCE(substr(action_name, 0,case when instr(action_name,'(') =0 then instr(action_name,'(') else instr(action_name,'(')-1 end),'') else action_name end || '.' ||  &#xD;&#xA;       (case when COALESCE(action_target,'null') = 'null' then action_source else action_target end)&#xD;&#xA;order by max(time_in_ms) desc">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetSummaryByDatabaseTransaction" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select query, &#xA;      query_hash QueryHash,&#xA;       count(*) Calls,  &#xA;&#x9;   sum(time_in_ms) / count(*) ResponseTime, &#xA;&#x9;   max(time_in_ms) MaxTime,&#xA;       sum(case when time_in_ms &gt; b.QUERY_LIMIT then 1 else 0 end) SlowCount&#xA;  from sgv_database_transaction a, sgs_act_log b&#xA; where start_time between @start_time and @end_time&#xA; group by query, query_hash&#xA; order by max(time_in_ms) desc;" sfwOracle="select to_char(query), query_hash QueryHash, count(*) Calls, cast(sum(time_in_ms) / count(*)as DECIMAL(30,2)) ResponseTime, max(time_in_ms) MaxTime, sum(case when time_in_ms &gt; b.QUERY_LIMIT then 1 else 0 end) SlowCount&#xD;&#xA;from sgv_database_transaction a, sgs_act_log b&#xD;&#xA;where start_time between @start_time and @end_time&#xD;&#xA;group by to_char(query), query_hash&#xD;&#xA;order by max(time_in_ms) desc">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="WebSummaryChartMinute" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select format(min(start_time), 'HH:mm') StartTime, &#xA;&#x9;   WEB_SERVER_NAME ServerName, &#xA;&#x9;   count(*) 'ReqCount', sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;           sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount&#xA;  from SGS_ACT_LOG_INST_ACTN&#xA; where WEB_SERVER_NAME is not null&#xA;   and START_TIME between @start_time and @end_time&#xA;group by WEB_SERVER_NAME, &#xA;      DATEPART(YEAR, START_TIME), DATEPART(MONTH, START_TIME), DATEPART(DAY, START_TIME), DATEPART(HOUR, START_TIME), (DATEPART(MINUTE, START_TIME) / 1) &#xA;order by 1, 2, 3" sfwOracle="select to_char(start_time,'HH') StartTime, &#xD;&#xA;WEB_SERVER_NAME ServerName, &#xD;&#xA;count(*) ReqCount, cast(sum(TIME_IN_MS) / count(*) as DECIMAL(30,2)) ResponseTime,&#xD;&#xA;sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount&#xD;&#xA;from SGS_ACT_LOG_INST_ACTN&#xD;&#xA;where WEB_SERVER_NAME is not null&#xD;&#xA;and START_TIME between sysdate-200 and sysdate&#xD;&#xA;group by start_time,WEB_SERVER_NAME, &#xD;&#xA;TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD'), TO_DATE(TO_CHAR(START_TIME, 'HH'),'HH'),TO_CHAR(START_TIME,'MI')&#xD;&#xA;order by 1, 2, 3">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="WebSummaryChartHour" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select format(min(start_time), 'HH') StartTime, &#xA;&#x9;   WEB_SERVER_NAME ServerName, &#xA;&#x9;   count(*) 'ReqCount', sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;           sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount&#xA;  from SGS_ACT_LOG_INST_ACTN&#xA; where WEB_SERVER_NAME is not null&#xA;   and START_TIME between @start_time and @end_time&#xA;group by WEB_SERVER_NAME, &#xA;      DATEPART(YEAR, START_TIME), DATEPART(MONTH, START_TIME), DATEPART(DAY, START_TIME), (DATEPART(HOUR, START_TIME) / 1)" sfwOracle="select to_char(start_time,'HH') StartTime, &#xD;&#xA;WEB_SERVER_NAME ServerName, &#xD;&#xA;count(*) ReqCount, cast(sum(TIME_IN_MS) / count(*) as DECIMAL(30,2)) ResponseTime,&#xD;&#xA;sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount&#xD;&#xA;from SGS_ACT_LOG_INST_ACTN&#xD;&#xA;where WEB_SERVER_NAME is not null&#xD;&#xA;and START_TIME between @start_time and @end_time&#xD;&#xA;group by start_time,WEB_SERVER_NAME, &#xD;&#xA;TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD'), TO_DATE(TO_CHAR(START_TIME, 'HH'),'HH')">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="WebSummaryChartDay" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select format(min(start_time), 'MM/dd/yyyy') StartTime, &#xA;&#x9;   WEB_SERVER_NAME ServerName, &#xA;&#x9;   count(*) 'ReqCount', sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;           sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount&#xA;  from SGS_ACT_LOG_INST_ACTN&#xA; where WEB_SERVER_NAME is not null&#xA;   and START_TIME between @start_time and @end_time&#xA;group by WEB_SERVER_NAME, &#xA;      DATEPART(YEAR, START_TIME), DATEPART(MONTH, START_TIME), (DATEPART(DAY, START_TIME) / 1)&#xA;order by 1, 2, 3" sfwOracle="select to_char(start_time,'MM/dd/yyyy') StartTime, &#xD;&#xA;WEB_SERVER_NAME ServerName, &#xD;&#xA;count(*) ReqCount, cast(sum(TIME_IN_MS) / count(*) as DECIMAL(30,2)) ResponseTime,&#xD;&#xA;sum(case when error_flag = 'Y' then 1 else 0 end) ErrorCount&#xD;&#xA;from SGS_ACT_LOG_INST_ACTN&#xD;&#xA;where WEB_SERVER_NAME is not null&#xD;&#xA;and START_TIME between @start_time and @end_time&#xD;&#xA;group by start_time,WEB_SERVER_NAME, &#xD;&#xA;TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD')&#xD;&#xA;order by 1, 2, 3">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetSummaryByAppServer" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT appserver_name ServerName,&#xA;             count(*) RequestCount,&#xA;             sum(time_in_ms) / count(*) AverageResponseTime,&#xA;             max(start_time) LastRequest,&#xA;             min(start_time) FirstRequest,&#xA;             sum(case when error_message is null then 0 else 1 end) ErrorCount,&#xA;             sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) SlowCount,&#xA;              round(cast(count(*) as float) / case when DateDiff(MINUTE, min(start_time), max(start_time)) = 0 then 1 else DateDiff(MINUTE, min(start_time), max(start_time)) end, 2) Throughput&#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn_step,&#xA;&#x9;    sgs_act_log &#xA;WHERE&#xA;&#x9;    appserver_name is not null   AND&#xA;&#x9;    start_time between @start_time AND  @end_time     &#xA;GROUP BY appserver_name     &#xA;ORDER BY 4 desc" sfwOracle="SELECT appserver_name ServerName,&#xD;&#xA;             count(*) RequestCount,&#xD;&#xA;             Round(sum(time_in_ms) / count(*),2) AverageResponseTime,&#xD;&#xA;             max(start_time) LastRequest,&#xD;&#xA;             min(start_time) FirstRequest,&#xD;&#xA;             sum(case when error_message is null then 0 else 1 end) ErrorCount,&#xD;&#xA;             sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) SlowCount,&#xD;&#xA;              Round(cast(count(*) as float) / case when ((max(start_time) - min(start_time))*24*60) = 0 then 1 else ((max(start_time)- min(start_time))*24*60) end, 2) Throughput&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step,&#xD;&#xA;&#x9;    sgs_act_log &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time AND   @end_time&#xD;&#xA;GROUP BY appserver_name     &#xD;&#xA;ORDER BY 4 desc">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="AppSummaryChartMinute" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select format(min(start_time), 'HH:mm') StartTime, &#xA;&#x9;   APPSERVER_NAME ServerName, &#xA;&#x9;   count(*) 'ReqCount', sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;           sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount&#xA;  from SGS_ACT_LOG_INST_ACTN_STEP&#xA;  where APPSERVER_NAME is not null&#xA;   and START_TIME between @start_time and @end_time&#xA;group by APPSERVER_NAME,&#xA;      DATEPART(YEAR, START_TIME), DATEPART(MONTH, START_TIME), DATEPART(DAY, START_TIME), DATEPART(HOUR, START_TIME), (DATEPART(MINUTE, START_TIME) / 1) &#xA;order by 1, 2, 3" sfwOracle="select to_char(start_time,'HH:mm') StartTime, &#xD;&#xA;&#x9;   APPSERVER_NAME ServerName, &#xD;&#xA;&#x9;   count(*) ReqCount, sum(TIME_IN_MS) / count(*) ResponseTime,&#xD;&#xA;           sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount&#xD;&#xA;  from SGS_ACT_LOG_INST_ACTN_STEP&#xD;&#xA;  where APPSERVER_NAME is not null&#xD;&#xA;   and START_TIME between sysdate-200 and sysdate&#xD;&#xA;group by start_time,APPSERVER_NAME,&#xD;&#xA;     TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD'), TO_DATE(TO_CHAR(START_TIME, 'HH'),'HH'),TO_CHAR(START_TIME,'MI')&#xD;&#xA;order by 1, 2, 3">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="AppSummaryChartHour" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select format(min(start_time), 'HH') StartTime, &#xA;&#x9;  APPSERVER_NAME ServerName, &#xA;          count(*) 'ReqCount', sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;          sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount&#xA;  from SGS_ACT_LOG_INST_ACTN_STEP&#xA;  where APPSERVER_NAME is not null&#xA;   and START_TIME between @start_time and @end_time&#xA;group by APPSERVER_NAME,&#xA;      DATEPART(YEAR, START_TIME), DATEPART(MONTH, START_TIME), DATEPART(DAY, START_TIME), (DATEPART(HOUR, START_TIME) / 1) &#xA;order by 1, 2, 3" sfwOracle="select to_char(start_time,'HH') StartTime, &#xD;&#xA;APPSERVER_NAME ServerName, &#xD;&#xA;count(*) ReqCount, cast(sum(TIME_IN_MS) / count(*) as DECIMAL(30,2)) ResponseTime,&#xD;&#xA;sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount&#xD;&#xA;from SGS_ACT_LOG_INST_ACTN_STEP&#xD;&#xA;where APPSERVER_NAME is not null&#xD;&#xA;and START_TIME between @start_time and @end_time&#xD;&#xA;group by start_time,APPSERVER_NAME,&#xD;&#xA;TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD'), TO_DATE(TO_CHAR(START_TIME, 'HH'),'HH')&#xD;&#xA;order by 1, 2, 3">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="AppSummaryChartDay" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select format(min(start_time), 'MM/dd/yyyy') StartTime, &#xA;&#x9;   APPSERVER_NAME ServerName, &#xA;&#x9;   count(*) 'ReqCount', sum(TIME_IN_MS) / count(*) ResponseTime,&#xA;           sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount&#xA;  from SGS_ACT_LOG_INST_ACTN_STEP&#xA;  where APPSERVER_NAME is not null&#xA;   and START_TIME between @start_time and @end_time&#xA;group by APPSERVER_NAME,&#xA;      DATEPART(YEAR, START_TIME), DATEPART(MONTH, START_TIME), (DATEPART(DAY, START_TIME) / 1)&#xA;order by 1, 2, 3" sfwOracle="select to_char(start_time,'MM/dd/yyyy') StartTime, &#xD;&#xA;APPSERVER_NAME ServerName, &#xD;&#xA;count(*) ReqCount, cast(sum(TIME_IN_MS) / count(*) as DECIMAL(30,2)) ResponseTime,&#xD;&#xA;sum(case when ERROR_MESSAGE is null then 0 else 1 end) ErrorCount&#xD;&#xA;from SGS_ACT_LOG_INST_ACTN_STEP&#xD;&#xA;where APPSERVER_NAME is not null&#xD;&#xA;and START_TIME between @start_time and @end_time&#xD;&#xA;group by start_time,APPSERVER_NAME,&#xD;&#xA;TO_DATE(TO_CHAR(START_TIME,'YYYY'),'YYYY'), TO_DATE(TO_CHAR(START_TIME, 'MM'),'MM'), TO_DATE(TO_CHAR(START_TIME,'DD'),'DD')&#xD;&#xA;order by 1, 2, 3">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetWebServerSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;             count(*) NoOfRecords &#xD;&#xA;&#x9;&#x9;&#x9;, 'RequestCount' as Type ,@start_time as 'startDate',@end_time as 'endDate'&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn with(nolock),&#xD;&#xA;&#x9;    sgs_act_log with(nolock) &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time   &#xD;&#xA;union &#x9;all&#x9;&#xD;&#xA; SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;  sum(case when ERROR_FLAG is null then 0 else 1 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9;, 'ErrorCount' ,@start_time as 'startDate',@end_time as 'endDate'&#xD;&#xA;FROM&#xD;&#xA;&#x9;    SGS_ACT_LOG_INST_ACTN with(nolock),&#xD;&#xA;&#x9;    sgs_act_log with(nolock) &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time    &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;union all&#xD;&#xA;&#x9;&#x9;SELECT&#x9;&#xD;&#xA;            &#xD;&#xA;&#x9;&#x9;&#x9; sum(case when time_in_ms &gt; TRANSACTION_LIMIT then 1 else 0 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9; ,'SlowCount' ,@start_time,@end_time&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn with(nolock),&#xD;&#xA;&#x9;    sgs_act_log with(nolock) &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time" sfwOracle="SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;             count(*) NoOfRecords &#xD;&#xA;&#x9;&#x9;&#x9;, 'RequestCount' as Type ,@start_time as startDate,@end_time as endDate&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time   &#xD;&#xA;union &#x9;all&#x9;&#xD;&#xA; SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;  sum(case when ERROR_FLAG is null then 0 else 1 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9;, 'ErrorCount' ,@start_time as startDate,@end_time as endDate&#xD;&#xA;FROM&#xD;&#xA;&#x9;    SGS_ACT_LOG_INST_ACTN ,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time    &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;union all&#xD;&#xA;&#x9;&#x9;SELECT&#x9;&#xD;&#xA;            &#xD;&#xA;&#x9;&#x9;&#x9; sum(case when time_in_ms &gt; TRANSACTION_LIMIT then 1 else 0 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9; ,'SlowCount' ,@start_time,@end_time&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn ,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    WEB_SERVER_NAME is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetAppServerSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;             count(*) NoOfRecords &#xD;&#xA;&#x9;&#x9;&#x9;, 'RequestCount' as Type ,@start_time as 'startDate',@end_time as 'endDate'&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step with(nolock),&#xD;&#xA;&#x9;    sgs_act_log with(nolock) &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time &#xD;&#xA;union &#x9;all&#x9;&#xD;&#xA; SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;  sum(case when error_message is null then 0 else 1 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9;, 'ErrorCount',@start_time as 'startDate',@end_time as 'endDate'&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step with(nolock),&#xD;&#xA;&#x9;    sgs_act_log with(nolock) &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time   &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;union all&#xD;&#xA;&#x9;&#x9;SELECT&#x9;&#xD;&#xA;            &#xD;&#xA;&#x9;&#x9;&#x9; sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9; ,'SlowCount',@start_time as 'startDate',@end_time as 'endDate'&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step with(nolock),&#xD;&#xA;&#x9;    sgs_act_log with(nolock) &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time" sfwOracle="SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;             count(*) NoOfRecords &#xD;&#xA;&#x9;&#x9;&#x9;, 'RequestCount' as Type ,@start_time as startDate,@end_time as endDate&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step ,&#xD;&#xA;&#x9;    sgs_act_log &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time &#xD;&#xA;union &#x9;all&#x9;&#xD;&#xA; SELECT&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;  sum(case when error_message is null then 0 else 1 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9;, 'ErrorCount',@start_time as startDate,@end_time as endDate&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step ,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time   &#xD;&#xA;&#xD;&#xA;&#x9;&#x9;union all&#xD;&#xA;&#x9;&#x9;SELECT&#x9;&#xD;&#xA;            &#xD;&#xA;&#x9;&#x9;&#x9; sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end) NoOfRecords&#xD;&#xA;&#x9;&#x9;&#x9; ,'SlowCount',@start_time as startDate,@end_time as endDate&#xD;&#xA;FROM&#xD;&#xA;&#x9;    sgs_act_log_inst_actn_step ,&#xD;&#xA;&#x9;    sgs_act_log  &#xD;&#xA;WHERE&#xD;&#xA;&#x9;    appserver_name is not null   AND&#xD;&#xA;&#x9;    start_time between @start_time  AND  @end_time">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetBPMServerSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select  DATEPART(HOUR, START_TIME) Time,  ACTION_TYPE , count(*) Count from SGW_BPM_TRACE_INST_ACTN &#xD;&#xA;&#x9;&#x9;--where START_TIME between GETDATE() -1 and GETDATE()&#xD;&#xA;&#x9;&#x9;group by  DATEPART(Hour, START_TIME) , ACTION_TYPE" sfwOracle="select  TO_NUMBER(TO_CHAR(START_TIME, 'HOUR')) Time,  ACTION_TYPE , count(*) Count from SGW_BPM_TRACE_INST_ACTN &#xD;&#xA;&#x9;&#x9;group by  TO_NUMBER(TO_CHAR(START_TIME, 'Hour')) , ACTION_TYPE;">
        <parameters />
      </query>
      <query ID="GetJobServerSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select count(*) 'Count'   , 'Allcount' as Type  , @start_time as 'startDate' ,  @end_time as 'endDate' from sgs_job_detail where START_TIME between @start_time and @end_time&#xD;&#xA;&#x9;union all &#xD;&#xA;&#x9;select count(*) as 'Count' , 'MonitoredCount' as Type  , @start_time as 'startDate' ,  @end_time as 'endDate' from sgs_job_detail jdt, sgs_job_header jhd,&#xD;&#xA;&#x9;&#x9;sgs_job_schedule jsc, sgs_job_schedule_detail jsd, sgs_act_log_job_step aljs &#xD;&#xA;&#x9;&#x9; where jdt.job_header_id = jhd.job_header_id&#xD;&#xA;&#x9;&#x9;   and jhd.job_schedule_id = jsc.job_schedule_id&#xD;&#xA;&#x9;&#x9;   and jsd.job_schedule_id = jhd.job_schedule_id&#xD;&#xA;&#x9;&#x9;   and jsd.step_code = jdt.step_code&#xD;&#xA;&#x9;&#x9;   and jsd.job_schedule_detail_id = aljs.job_schedule_detail_id &#xD;&#xA;&#x9;&#x9;   and jdt.start_time between @start_time and @end_time&#xD;&#xA;&#x9;&#x9;   union all &#xD;&#xA;&#x9;select count(*) 'Count' , 'SlowCount' as Type , @start_time as 'startDate' ,  @end_time as 'endDate' from sgs_job_detail_th where START_TIME between @start_time and @end_time" sfwOracle="select count(*) &quot;Count&quot;   , 'Allcount' as Type  , @start_time as &quot;startDate&quot; ,  @end_time as &quot;endDate&quot; from sgs_job_detail where START_TIME between @start_time and @end_time&#xD;&#xA;&#x9;union all &#xD;&#xA;&#x9;select count(*) as &quot;Count&quot; , 'MonitoredCount' as Type  , @start_time as &quot;startDate&quot; ,  @end_time as &quot;endDate&quot; from sgs_job_detail jdt, sgs_job_header jhd,&#xD;&#xA;&#x9;&#x9;sgs_job_schedule jsc, sgs_job_schedule_detail jsd, sgs_act_log_job_step aljs &#xD;&#xA;&#x9;&#x9; where jdt.job_header_id = jhd.job_header_id&#xD;&#xA;&#x9;&#x9;   and jhd.job_schedule_id = jsc.job_schedule_id&#xD;&#xA;&#x9;&#x9;   and jsd.job_schedule_id = jhd.job_schedule_id&#xD;&#xA;&#x9;&#x9;   and jsd.step_code = jdt.step_code&#xD;&#xA;&#x9;&#x9;   and jsd.job_schedule_detail_id = aljs.job_schedule_detail_id &#xD;&#xA;&#x9;&#x9;   and jdt.start_time between @start_time and @end_time&#xD;&#xA;&#x9;&#x9;   union all &#xD;&#xA;&#x9;select count(*) &quot;Count&quot; , 'SlowCount' as Type , @start_time as &quot;startDate&quot; ,  @end_time as &quot;endDate&quot; from sgs_job_detail_th where START_TIME between @start_time and @end_time">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetWebserverCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xA;&#x9;      count(*) RequestCount,&#xA;&#x9;      ISNULL(sum(CONVERT(BIGINT, time_in_ms)) / count(*), 0) AverageResponseTime,&#xA;&#x9;      max(start_time) LastRequest,&#xA;&#x9;      min(start_time) FirstRequest,&#xA;&#x9;      ISNULL(sum(case when error_flag = 'y' then 1 else 0 end),0) ErrorCount,&#xA;&#x9;      ISNULL(sum(case when time_in_ms &gt; transaction_limit then 1 else 0 end),0) SlowCount,&#xA;              round(Cast(count(*) AS int) / case when DateDiff(MINUTE, min(start_time), max(start_time)) = 0 then 1 else DateDiff(MINUTE, min(start_time), max(start_time)) end, 2) Throughput &#xA;          , @start_time as 'start_time' , @end_time  as 'end_time' ,&#xA;&#x9;&#x9;  count(distinct web_server_name) as WebServerCount&#xA; FROM&#xA;&#x9;    sgs_act_log_inst_actn,&#xA;&#x9;     sgs_act_log&#xA;WHERE&#xA;&#x9;    web_server_name is not null   AND&#xA;&#x9;     start_time between  @start_time  AND  @end_time" sfwOracle="SELECT Count(*)                                        RequestCount, &#xD;&#xA;       COALESCE(Round(Sum(time_in_ms) / Count(*)),0)                      AverageResponseTime, &#xD;&#xA;       Max(start_time)                                 LastRequest, &#xD;&#xA;       Min(start_time)                                 FirstRequest, &#xD;&#xA;       COALESCE(Sum(CASE &#xD;&#xA;             WHEN error_message IS NULL THEN 0 &#xD;&#xA;             ELSE 1 &#xD;&#xA;           END),0)                                        ErrorCount, &#xD;&#xA;       COALESCE(Sum(CASE &#xD;&#xA;             WHEN time_in_ms &gt; appserver_limit THEN 1 &#xD;&#xA;             ELSE 0 &#xD;&#xA;           END),0)                                        SlowCount, &#xD;&#xA;       ROUND(cast(Count(*) as number(10,2)) / CASE &#xD;&#xA;                                                 WHEN ( &#xD;&#xA;             Max(start_time) - Min(start_time) ) * &#xD;&#xA;                                                      1440 = 0 THEN 1 &#xD;&#xA;                                                 ELSE ( &#xD;&#xA;             Max(start_time) - Min(start_time) ) * &#xD;&#xA;                                                      1440 &#xD;&#xA;                                               END, 2) Throughput, &#xD;&#xA;       @start_time                                     start_time, &#xD;&#xA;       @end_time                                       end_time, &#xD;&#xA;       Count(DISTINCT appserver_name)                  AS WebServerCount &#xD;&#xA;FROM   sgs_act_log_inst_actn_step, &#xD;&#xA;       sgs_act_log &#xD;&#xA;WHERE  appserver_name IS NOT NULL &#xD;&#xA;       AND start_time BETWEEN @start_time AND @end_time &#xD;&#xA;ORDER  BY 4 DESC">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetAppServerSummaryCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xA;             count(*) RequestCount,&#xA;             ISNULL(sum(time_in_ms) / count(*),0) AverageResponseTime,&#xA;             max(start_time) LastRequest,&#xA;             min(start_time) FirstRequest,&#xA;             ISNULL(sum(case when error_message is null then 0 else 1 end),0) ErrorCount,&#xA;             ISNULL(sum(case when time_in_ms &gt; appserver_limit then 1 else 0 end),0) SlowCount,&#xA;              round(cast(count(*) as float) / case when DateDiff(MINUTE, min(start_time), max(start_time)) = 0 then 1 else DateDiff(MINUTE, min(start_time), max(start_time)) end, 2) Throughput,&#xA;               @start_time as 'start_time' , @end_time as 'end_time' ,&#xA;&#x9;&#x9;  count(distinct appserver_name) as WebServerCount&#xA;FROM&#xA;&#x9;    sgs_act_log_inst_actn_step with(nolock) ,&#xA;&#x9;    sgs_act_log with(nolock) &#xA;WHERE&#xA;&#x9;    appserver_name is not null   AND&#xA;&#x9;    start_time between @start_time  AND  @end_time         &#xA;   &#xA;ORDER BY 4 desc" sfwOracle="SELECT Count(*)                                        RequestCount, &#xD;&#xA;       COALESCE(Round(Sum(time_in_ms) / Count(*)),0)                      AverageResponseTime, &#xD;&#xA;       Max(start_time)                                 LastRequest, &#xD;&#xA;       Min(start_time)                                 FirstRequest, &#xD;&#xA;       COALESCE(Sum(CASE &#xD;&#xA;             WHEN error_message IS NULL THEN 0 &#xD;&#xA;             ELSE 1 &#xD;&#xA;           END),0)                                        ErrorCount, &#xD;&#xA;       COALESCE(Sum(CASE &#xD;&#xA;             WHEN time_in_ms &gt; appserver_limit THEN 1 &#xD;&#xA;             ELSE 0 &#xD;&#xA;           END),0)                                        SlowCount, &#xD;&#xA;       ROUND(cast(Count(*) as number(10,2)) / CASE &#xD;&#xA;                                                 WHEN ( &#xD;&#xA;             Max(start_time) - Min(start_time) ) * &#xD;&#xA;                                                      1440 = 0 THEN 1 &#xD;&#xA;                                                 ELSE ( &#xD;&#xA;             Max(start_time) - Min(start_time) ) * &#xD;&#xA;                                                      1440 &#xD;&#xA;                                               END, 2) Throughput, &#xD;&#xA;       @start_time                                     start_time, &#xD;&#xA;       @end_time                                       end_time, &#xD;&#xA;       Count(DISTINCT appserver_name)                  AS WebServerCount &#xD;&#xA;FROM   sgs_act_log_inst_actn_step, &#xD;&#xA;       sgs_act_log &#xD;&#xA;WHERE  appserver_name IS NOT NULL &#xD;&#xA;       AND start_time BETWEEN @start_time AND @end_time &#xD;&#xA;ORDER  BY 4 DESC">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetJobServerSummaryCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select jd.status_id , jd.STATUS_VALUE, cv.DESCRIPTION, count(*) 'count' &#xD;&#xA; , @start_time as 'Start_time' , @end_time as 'End_time'&#xD;&#xA;  from sgs_job_detail jd inner join SGS_CODE_VALUE cv &#xD;&#xA;  on jd.STATUS_VALUE = cv.CODE_VALUE&#xD;&#xA;  and jd.STATUS_ID = cv.CODE_ID&#xD;&#xA; where jd.START_TIME between @start_time and @end_time&#xD;&#xA; group by jd.status_id,  jd.STATUS_VALUE,cv.DESCRIPTION" sfwOracle="SELECT jd.status_id, &#xD;&#xA;       jd.status_value, &#xD;&#xA;       cv.description, &#xD;&#xA;       Count(*)    count, &#xD;&#xA;       @start_time  Start_time, &#xD;&#xA;       @end_time    End_time &#xD;&#xA;FROM   sgs_job_detail jd &#xD;&#xA;       INNER JOIN sgs_code_value cv &#xD;&#xA;               ON jd.status_value = cv.code_value &#xD;&#xA;                  AND jd.status_id = cv.code_id &#xD;&#xA;WHERE  jd.start_time BETWEEN @start_time AND @end_time &#xD;&#xA;GROUP  BY jd.status_id, &#xD;&#xA;          jd.status_value, &#xD;&#xA;          cv.description">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetBPMServerSummaryCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select case when  action_type = 'BpmRequestsHandler' then 'Request' &#xD;&#xA;&#x9;&#x9;when ACTION_TYPE ='Dequeue' then 'Queue' &#xD;&#xA;&#x9;&#x9;else  action_type end as action_type , count(*) as NoOfItems , @start_time as 'Start_time' ,  @end_time  as 'End_time'&#xD;&#xA;&#x9;&#x9;from SGW_BPM_TRACE_INST_ACTN  &#xD;&#xA;&#x9;&#x9;where START_TIME between @start_time and @end_time &#xD;&#xA;&#x9;&#x9;and action_type in ('BpmRequestsHandler','Dequeue')&#xD;&#xA;&#x9;&#x9;group by ACTION_TYPE&#xD;&#xA;&#xD;&#xA;union all &#xD;&#xA;&#xD;&#xA;select 'Error Count' as action_type,  ISNULL( count(*) , 0) TotalException , @start_time as 'Start_time' ,  @end_time  as 'End_time'  from SGW_BPM_PROCESSING_ERROR  &#xD;&#xA;where CREATED_DATE  between @start_time and @end_time" sfwOracle="SELECT CASE &#xD;&#xA;         WHEN action_type = 'BpmRequestsHandler' THEN 'Request' &#xD;&#xA;         WHEN action_type = 'Dequeue' THEN 'Queue' &#xD;&#xA;         ELSE action_type &#xD;&#xA;       END         action_type, &#xD;&#xA;       Count(*)    NoOfItems, &#xD;&#xA;       @start_time Start_time, &#xD;&#xA;       @end_time   End_time &#xD;&#xA;FROM   sgw_bpm_trace_inst_actn &#xD;&#xA;WHERE  start_time BETWEEN @start_time AND @end_time &#xD;&#xA;       AND action_type IN ( 'BpmRequestsHandler', 'Dequeue' ) &#xD;&#xA;GROUP  BY action_type &#xD;&#xA;UNION ALL &#xD;&#xA;SELECT 'Error Count'    action_type, &#xD;&#xA;       Nvl(Count(*), 0) TotalException, &#xD;&#xA;       @start_time      Start_time, &#xD;&#xA;       @end_time        End_time &#xD;&#xA;FROM   sgw_bpm_processing_error &#xD;&#xA;WHERE  created_date BETWEEN @start_time AND @end_time">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetBPMServerErrorCounts" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select count(*) ItemProcessed , inst.ENGINE_NAME  , count(error.PROCESSING_ERROR_ID) as ErrorCount , @start_time as 'Start_time' , @end_time as 'End_time'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; from SGW_BPM_TRACE_INSTANCE inst with(nolock) &#xD;&#xA;&#x9;&#x9;inner  join SGW_BPM_TRACE_INST_ACTN  act with(nolock) &#xD;&#xA;&#x9;&#x9;on  inst.TRACE_INSTANCE_ID = act.TRACE_INSTANCE_ID&#xD;&#xA;&#x9;&#x9;inner join SGW_BPM_PROCESSING_ERROR error &#xD;&#xA;&#x9;&#x9;on act.TRANSACTION_ID = error.TRANSACTION_ID&#xD;&#xA;&#x9;&#x9;where inst.START_TIME between @start_time and @end_time &#xD;&#xA;&#x9;&#x9;group by inst.ENGINE_NAME" sfwOracle="select count(*) ItemProcessed , inst.ENGINE_NAME  , count(error.PROCESSING_ERROR_ID) as ErrorCount , @start_time as Start_time , @end_time as End_time&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; from SGW_BPM_TRACE_INSTANCE inst &#xD;&#xA;&#x9;&#x9;inner  join SGW_BPM_TRACE_INST_ACTN  act  &#xD;&#xA;&#x9;&#x9;on  inst.TRACE_INSTANCE_ID = act.TRACE_INSTANCE_ID&#xD;&#xA;&#x9;&#x9;inner join SGW_BPM_PROCESSING_ERROR error &#xD;&#xA;&#x9;&#x9;on act.TRANSACTION_ID = error.TRANSACTION_ID&#xD;&#xA;&#x9;&#x9;where inst.START_TIME between @start_time and @end_time &#xD;&#xA;&#x9;&#x9;group by inst.ENGINE_NAME">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
      <query ID="GetBPMServerAvgResponse" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select count(*) ItemProcessed , inst.ENGINE_NAME  &#xD;&#xA;&#x9;&#x9;, round(cast(count(dtl.TRACE_INST_ACTN_DTL_ID) as float) / case when DateDiff(MINUTE, min(dtl.start_time), max(dtl.start_time)) = 0 &#xD;&#xA;&#x9;&#x9;then 1 else DateDiff(MINUTE, min(dtl.start_time), max(dtl.start_time)) end, 2) Throughput &#xD;&#xA;&#x9;&#x9; from SGW_BPM_TRACE_INSTANCE inst with(nolock) &#xD;&#xA;&#x9;&#x9;inner  join SGW_BPM_TRACE_INST_ACTN  act with(nolock) &#xD;&#xA;&#x9;&#x9;on  inst.TRACE_INSTANCE_ID = act.TRACE_INSTANCE_ID&#xD;&#xA;&#x9;&#x9;inner join SGW_BPM_TRACE_INST_ACTN_DTL  dtl &#xD;&#xA;&#x9;&#x9;on act.TRANSACTION_ID = dtl.TRANSACTION_ID&#xD;&#xA;&#x9;&#x9;where inst.START_TIME between @start_time and @end_time &#xD;&#xA;&#x9;&#x9;group by inst.ENGINE_NAME" sfwOracle="select count(*) ItemProcessed , inst.ENGINE_NAME  &#xD;&#xA;&#x9;&#x9;, round(cast(count(dtl.TRACE_INST_ACTN_DTL_ID) as binary_double) / case when (max(dtl.start_time) - min(dtl.start_time)) * 1440 = 0 &#xD;&#xA;&#x9;&#x9;then 1 else (max(dtl.start_time) - min(dtl.start_time)) * 1440 end, 2) Throughput &#xD;&#xA;&#x9;&#x9; from SGW_BPM_TRACE_INSTANCE inst &#xD;&#xA;&#x9;&#x9;inner  join SGW_BPM_TRACE_INST_ACTN  act&#xD;&#xA;&#x9;&#x9;on  inst.TRACE_INSTANCE_ID = act.TRACE_INSTANCE_ID&#xD;&#xA;&#x9;&#x9;inner join SGW_BPM_TRACE_INST_ACTN_DTL  dtl &#xD;&#xA;&#x9;&#x9;on act.TRANSACTION_ID = dtl.TRANSACTION_ID&#xD;&#xA;    where inst.START_TIME between @start_time and @end_time &#xD;&#xA;&#x9;&#x9;group by inst.ENGINE_NAME">
        <parameters>
          <parameter ID="@start_time" sfwDataType="DateTime" />
          <parameter ID="@end_time" sfwDataType="DateTime" />
        </parameters>
      </query>
    </group>
  </queries>
  <delete />
  <groups />
  <checklist />
  <methods>
    <method ID="LoadDashboard" sfwMethodType="Other">
      <item ID="GetDashboardDetails" sfwItemType="Method" sfwDataType="ArrayList" />
    </method>
    <method ID="SetDates" sfwMethodType="Load" sfwMode="All">
      <item ID="FromDate" sfwParameter="FromDate" sfwDataType="datetime" sfwItemType="property" />
      <item ID="ToDate" sfwParameter="ToDate" sfwDataType="datetime" sfwItemType="property" />
      <item ID="rulSetDates" sfwItemType="rule" />
      <parameter ID="FromDate" sfwDataType="datetime" />
      <parameter ID="ToDate" sfwDataType="datetime" />
    </method>
    <method ID="UpdateToDate">
      <item ID="rulUpdateToDate" sfwItemType="rule" />
    </method>
    <method ID="RefreshWebserverData" sfwDescription="Refresh Webserver Data" sfwMethodType="Other">
      <item />
    </method>
    <method ID="LoadWebserdetail" sfwMethodType="Load" sfwMode="Update">
      <item ID="FromDate" sfwParameter="FromDate" sfwItemType="property" sfwDataType="datetime" />
      <parameter ID="FromDate" sfwDataType="datetime" />
      <item ID="ToDate" sfwParameter="ToDate" sfwItemType="property" sfwDataType="datetime" />
      <parameter ID="ToDate" sfwDataType="datetime" />
    </method>
    <method ID="LoadAppserver" sfwMethodType="Load" sfwMode="Update">
      <item ID="FromDate" sfwParameter="FromDate" sfwItemType="property" sfwDataType="datetime" />
      <parameter ID="FromDate" sfwDataType="datetime" Value="FromDate" />
      <item ID="ToDate" sfwParameter="ToDate" sfwItemType="property" sfwDataType="datetime" />
      <parameter ID="ToDate" sfwDataType="datetime" />
    </method>
    <method ID="LoadJobserver" sfwMethodType="Load" sfwMode="Update">
      <item ID="FromDate" sfwParameter="FromDate" sfwItemType="property" sfwDataType="datetime" />
      <parameter ID="FromDate" sfwDataType="datetime" />
      <item ID="ToDate" sfwParameter="ToDate" sfwItemType="property" sfwDataType="datetime" />
      <parameter ID="ToDate" sfwDataType="datetime" />
    </method>
    <method ID="LoadBPMServer" sfwMethodType="Load">
      <item ID="FromDate" sfwParameter="FromDate" sfwItemType="property" sfwDataType="datetime" />
      <parameter ID="FromDate" sfwDataType="datetime" />
      <item ID="ToDate" sfwParameter="ToDate" sfwItemType="property" sfwDataType="datetime" />
      <parameter ID="ToDate" sfwDataType="datetime" />
    </method>
  </methods>
  <objectmethods>
    <method ID="GetDashboardDetails" sfwReturnType="ArrayList">
      <parameters />
    </method>
    <method ID="SetDates" sfwReturnType="ArrayList" />
  </objectmethods>
  <conditions>
    <rulecondition>
      <condition ID="VisiableRule-DataBaseTabOarcle" sfwRuleID="rcAppMonitoring001" />
      <condition ID="VisiableRule-DataBaseTabSql" sfwRuleID="rcAppMonitoring002" />
    </rulecondition>
    <expressioncondition />
  </conditions>
  <constraints>
    <softconstraints />
    <hardconstraints />
    <deleteconstraints />
    <fieldconstraints />
  </constraints>
</entity>
